{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    Args:\n    numbers (List[float]): A list of floating point numbers.\n    threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n    bool: True if there are two numbers closer than the threshold, False otherwise.\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize the minimum allowed difference to infinity\n    min_allowed_diff = float('inf')\n    \n    # Iterate over the list of numbers\n    for i in range(1, len(numbers)):\n        # Calculate the difference between the current number and the previous one\n        diff = abs(numbers[i] - numbers[i-1])\n        \n        # If the difference is less than the threshold and less than the current minimum\n        # allowed difference, update the minimum allowed difference\n        if diff < threshold and diff < min_allowed_diff:\n            min_allowed_diff = diff\n    \n    # If the minimum allowed difference is still infinity, it means no two numbers\n    # were closer than the threshold, so return False\n    if min_allowed_diff == float('inf'):\n        return False\n    # Otherwise, return True\n    else:\n        return True"}
{"task_id": "HumanEval/1", "solution": "from typing import List\nfrom collections import deque\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = deque()\n    result = []\n    temp = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            if not stack:\n                stack.append(char)\n                temp += char\n            else:\n                temp += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = \"\"\n            else:\n                return []  # Unbalanced parentheses\n    if stack:\n        return []  # Unbalanced parentheses\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" Calculate Mean Absolute Deviation for a given list of numbers.\n    \n    Args:\n    numbers (List[float]): A list of floating point numbers.\n    \n    Returns:\n    float: The Mean Absolute Deviation of the input numbers.\n    \"\"\"\n    \n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Initialize the sum of absolute deviations\n    sum_of_abs_dev = 0\n    \n    # Calculate the sum of absolute deviations from the mean\n    for num in numbers:\n        sum_of_abs_dev += abs(num - mean)\n    \n    # Calculate and return the Mean Absolute Deviation\n    return sum_of_abs_dev / len(numbers)"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string.split():\n        for p in char:\n            if p == '(':\n                stack.append(p)\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif p == ')':\n                stack.pop()\n                current_depth -= 1\n        result.append(max_depth)\n        stack.clear()\n        current_depth = 0\n        max_depth = 0\n\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    Args:\n        strings (List[str]): The input list of strings\n        substring (str): The substring to search for\n    Returns:\n        List[str]: The filtered list of strings\n    \"\"\"\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the integers in the list.\n    \"\"\"\n    # Initialize sum and product to 0 and 1 respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Add the number to the total sum\n        total_sum += num\n        # Multiply the number to the total product\n        total_product *= num\n    \n    # Return a tuple containing the sum and product\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\"\"\"\n    result = []\n    max_seen = float('-inf')  # Initialize max_seen to negative infinity\n\n    for num in numbers:\n        result.append(max(max_seen, num))  # Update the maximum seen so far\n        max_seen = max(max_seen, num)  # Update the maximum seen so far\n\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest prefix that is not a palindrome\n    i = 0\n    while i < len(string) and string[:i+1] == string[:i+1][::-1]:\n        i += 1\n\n    # The rest of the string is the reverse of the prefix\n    prefix = string[:i][::-1]\n    suffix = string[i:]\n\n    return prefix + '#' + suffix\n\n\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # 'catac'\nprint(make_palindrome('cata'))  # 'catac'"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    Args:\n    a (str): The first input string consisting only of 1s and 0s.\n    b (str): The second input string consisting only of 1s and 0s.\n    \n    Returns:\n    str: The result of the binary XOR operation on a and b.\n    \"\"\"\n    # Check if both inputs are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over the characters in the input strings\n    for char_a, char_b in zip(a, b):\n        # Perform binary XOR on the current characters\n        if char_a == '1' and char_b == '1':\n            result += '0'\n        elif char_a == '0' and char_b == '0':\n            result += '0'\n        else:\n            result += '1'\n\n    # Return the result as a string\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    Args:\n    strings (List[str]): A list of strings.\n    \n    Returns:\n    Optional[str]: The longest string in the list, or None if the list is empty.\n    \"\"\"\n    if not strings:  # if the list is empty, return None\n        return None\n    return max(strings, key=len)  # return the longest string in the list"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"Return the greatest common divisor of two integers a and b\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\"\"\"\n    return [string[:i+1] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"Given a string, find out how many distinct characters (regardless of case) does it consist of\"\"\"\n    return len(set(c.casefold() for c in string))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    temp = ''\n    for char in music_string:\n        if char in notes:\n            if temp:\n                result.append(notes[temp])\n            temp = char\n        else:\n            temp += char\n    result.append(notes[temp])\n    return result"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \n    Args:\n        string (str): The original string to search in.\n        substring (str): The substring to search for.\n    \n    Returns:\n        int: The number of times the substring appears in the string.\n    \"\"\"\n    count = 0\n    string_length = len(string)\n    substring_length = len(substring)\n    \n    # Iterate over the string with a sliding window of the same length as the substring\n    for i in range(string_length - substring_length + 1):\n        # Check if the substring matches the current window\n        if string[i:i + substring_length] == substring:\n            # If it matches, increment the count and move the window forward\n            count += 1\n    \n    return count"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    # Create a dictionary to map string numbers to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n\n    # Split the input string into a list of numbers\n    num_list = numbers.split()\n\n    # Sort the list of numbers based on their integer values\n    num_list.sort(key=lambda x: num_dict[x])\n\n    # Join the sorted list of numbers with spaces and return as a string\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()  # Sort the list of numbers in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n    closest_numbers = ()  # Initialize the closest numbers tuple\n\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i-1]  # Calculate the absolute difference between the current and previous numbers\n        if diff < min_diff:\n            min_diff = diff\n            closest_numbers = (numbers[i-1], numbers[i])  # Update the closest numbers\n\n    return tuple(sorted(closest_numbers))  # Return the closest numbers in order (smaller, larger)"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    Args:\n        numbers (List[float]): A list of numbers\n    Returns:\n        List[float]: The rescaled list of numbers\n    \"\"\"\n    if not numbers:\n        return []\n    \n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Check if all values are the same\n    if min_val == max_val:\n        return [1.0 if i == 0 else 0.0 for i in range(len(numbers))]\n    \n    # Apply the linear transform\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"Return the largest number that divides `n` evenly, smaller than `n`\"\"\"\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1  # n is prime, so the largest divisor is itself"}
