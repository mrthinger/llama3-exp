{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): A list of float numbers.\n        threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n        bool: True if there are two numbers in the list with a difference less than or equal to the threshold, False otherwise.\n    \"\"\"\n    \n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize a flag to False, assuming no two numbers are close enough\n    has_close = False\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next one\n        difference = numbers[i + 1] - numbers[i]\n        \n        # If the difference is less than or equal to the threshold, set the flag to True and break the loop\n        if difference <= threshold:\n            has_close = True\n            break\n    \n    # Return the flag\n    return has_close"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    stack = []\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            stack.append(char)\n            current_group.append(char)\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(\"\".join(current_group))\n                    current_group = []\n            else:\n                raise ValueError(\"Unbalanced parentheses\")\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n    return result"}
{"task_id": "HumanEval/2", "solution": "import math\n\ndef truncate_number(number: float) -> float:\n    return math.modf(number)[0]"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function takes a list of deposit and withdrawal operations on a bank account \n    that starts with zero balance. It detects if at any point the balance of account \n    falls below zero, and at that point function returns True. Otherwise it returns False.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance falls below zero, False otherwise.\n    \"\"\"\n    balance = 0  # Initialize the balance to zero\n    for operation in operations:\n        balance += operation  # Perform the operation on the balance\n        if balance < 0:  # Check if the balance falls below zero\n            return True  # If it does, return True\n    return False  # If the balance never falls below zero, return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation (MAD) of a list of numbers.\n\n    The Mean Absolute Deviation is the average absolute difference between each\n    element and the mean of the dataset.\n\n    MAD = average | x - x_mean |\n\n    Args:\n        numbers (List[float]): A list of float numbers.\n\n    Returns:\n        float: The Mean Absolute Deviation of the input numbers.\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Initialize the sum of absolute deviations to 0\n    sum_abs_dev = 0\n    \n    # Calculate the absolute deviation of each number from the mean\n    for num in numbers:\n        sum_abs_dev += abs(num - mean)\n    \n    # Calculate the Mean Absolute Deviation\n    mad = sum_abs_dev / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\n    Args:\n        numbers (List[int]): The input list of numbers\n        delimeter (int): The number to be inserted between every two consecutive elements\n\n    Returns:\n        List[int]: The modified list with delimeter inserted between every two consecutive elements\n    \"\"\"\n    result = []  # Initialize an empty list to store the result\n    for i, num in enumerate(numbers):  # Iterate over the input list with index\n        result.append(num)  # Append the current number to the result\n        if i != len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimeter)  # If not, append the delimeter to the result\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of parentheses groups as input, \n    and returns a list of integers where each integer represents \n    the deepest level of nesting of parentheses in the corresponding group.\n\n    Args:\n    paren_string (str): A string of parentheses groups separated by spaces.\n\n    Returns:\n    List[int]: A list of integers where each integer represents the deepest level of nesting of parentheses in the corresponding group.\n    \"\"\"\n    groups = paren_string.split()  # split the input string into groups\n    result = []  # initialize a list to store the result\n\n    for group in groups:\n        stack = []  # initialize a stack to keep track of the nesting level\n        max_level = 0  # initialize the maximum level of nesting for the current group\n        level = 0  # initialize the current level of nesting\n\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                level += 1\n                max_level = max(max_level, level)  # update the maximum level of nesting\n            elif char == ')':\n                stack.pop()\n                level -= 1\n\n        result.append(max_level)  # append the maximum level of nesting for the current group to the result\n\n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n\n    Args:\n        strings (List[str]): Input list of strings\n        substring (str): Substring to search for\n\n    Returns:\n        List[str]: Filtered list of strings that contain the given substring\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and the product of the input list.\n    \"\"\"\n    \n    # Calculate the sum of the numbers using the built-in sum function\n    total_sum = sum(numbers)\n    \n    # Calculate the product of the numbers using the reduce function from the functools module\n    # The reduce function applies a binary function (in this case, multiplication) to all items in an iterable\n    total_product = reduce(mul, numbers, 1) if numbers else 1\n    \n    # Return a tuple containing the sum and the product\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum element found until given moment in the sequence.\n    \"\"\"\n    # Initialize an empty list to store the rolling maximum values\n    rolling_max_values = []\n    # Initialize the maximum value to negative infinity\n    max_value = float('-inf')\n    \n    # Iterate over the input list of numbers\n    for num in numbers:\n        # Update the maximum value if the current number is greater\n        max_value = max(max_value, num)\n        # Append the current maximum value to the result list\n        rolling_max_values.append(max_value)\n    \n    return rolling_max_values\n\n# Test the function\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if not string:\n        return string  # empty string is already a palindrome\n\n    for i in range(len(string) - 1, -1, -1):\n        prefix = string[:i]\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            return string + prefix[::-1]\n\n    # if no palindromic suffix is found, return the string duplicated in reverse\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    This function performs binary XOR on two input strings a and b.\n    The inputs are assumed to be strings consisting only of 1s and 0s.\n    The function returns the result of the XOR operation as a string.\n\n    Parameters:\n    a (str): The first input string.\n    b (str): The second input string.\n\n    Returns:\n    str: The result of the binary XOR operation on a and b.\n    \"\"\"\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Check if the input strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n\n    # Iterate over the characters in the input strings\n    for char_a, char_b in zip(a, b):\n        # Perform binary XOR on the current characters\n        # The XOR operation is equivalent to adding the characters modulo 2\n        # In Python, '1' becomes 1 and '0' becomes 0 when converted to int\n        xor_result = str(int(char_a) ^ int(char_b))\n\n        # Append the result to the output string\n        result += xor_result\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): A list of strings\n\n    Returns:\n        Optional[str]: The longest string in the list or None if the list is empty\n    \"\"\"\n    # If the input list is empty, return None\n    if not strings:\n        return None\n    \n    # Initialize the longest string with the first string in the list\n    longest_str = strings[0]\n    \n    # Iterate over the rest of the strings in the list\n    for string in strings[1:]:\n        # If the current string is longer than the longest string found so far, update the longest string\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    # Return the longest string\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]  # using list comprehension"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(char.lower() for char in string))"}
{"task_id": "HumanEval/17", "solution": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n\n    Args:\n        string (str): The original string to search in.\n        substring (str): The substring to search for.\n\n    Returns:\n        int: The number of times the substring can be found in the original string.\n    \"\"\"\n    count = 0  # Initialize a counter to store the number of occurrences\n    i = 0  # Initialize a pointer to traverse the string\n    while i < len(string):  # Traverse the string\n        if string[i:i + len(substring)] == substring:  # Check if the substring is found\n            count += 1  # Increment the counter if found\n        i += 1  # Move the pointer forward\n    return count  # Return the total count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    This function takes a string of space-delimited numberals, \n    sorts them in ascending order and returns the sorted string.\n\n    Args:\n    numbers (str): A string of space-delimited numberals from 'zero' to 'nine'.\n\n    Returns:\n    str: The input string with numbers sorted from smallest to largest.\n    \"\"\"\n    \n    # Define a dictionary to map numberals to their corresponding integer values\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of numberals\n    num_list: List[str] = numbers.split()\n    \n    # Sort the list of numberals based on their corresponding integer values\n    num_list.sort(key=lambda x: num_map[x])\n    \n    # Join the sorted list of numberals into a string and return\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \n    Args:\n        numbers (List[float]): A list of float numbers.\n    \n    Returns:\n        Tuple[float, float]: A tuple of two float numbers that are the closest to each other.\n    \"\"\"\n    \n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize the minimum difference and the closest two numbers\n    min_diff = float('inf')\n    closest_two = (None, None)\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        diff = numbers[i + 1] - numbers[i]\n        \n        # If the current difference is less than the minimum difference found so far\n        if diff < min_diff:\n            # Update the minimum difference and the closest two numbers\n            min_diff = diff\n            closest_two = (numbers[i], numbers[i + 1])\n    \n    # Return the closest two numbers\n    return closest_two"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    Args:\n        numbers (List[float]): A list of float numbers.\n\n    Returns:\n        List[float]: A list of float numbers rescaled to the unit interval [0, 1].\n    \"\"\"\n    # Check if the input list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The input list must have at least two elements.\")\n\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Calculate the range of the values\n    range_val = max_val - min_val\n\n    # Apply the linear transformation to rescale the values to the unit interval [0, 1]\n    rescaled_numbers = [(num - min_val) / range_val for num in numbers]\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        # if i is a factor, keep dividing n by i until it's not anymore\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    # if n is not 1, it means it's a prime number and we add it to the factors\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    seen = set()  # Initialize a set to keep track of seen elements\n    result = []  # Initialize an empty list to store the result\n\n    for num in numbers:  # Iterate over the input list\n        if numbers.count(num) == 1:  # Check if the element occurs only once\n            if num not in seen:  # Check if the element is not seen before\n                result.append(num)  # Add the element to the result\n                seen.add(num)  # Mark the element as seen\n\n    return result\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n\n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]  # Use list comprehension to filter the list"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef derivative(xs, x):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have a non-zero leading coefficient\")\n\n    # initial guess\n    x = 1.0\n\n    # Newton-Raphson method\n    while True:\n        y = poly(xs, x)\n        if abs(y) < 1e-6:  # convergence\n            return x\n        x = x - y / derivative(xs, x)"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    result = l[:]  # create a copy of the original list\n    thirds = [x for i, x in enumerate(l) if i % 3 == 2]  # collect elements at indices 2, 5, 8, ...\n    thirds.sort()  # sort them\n    j = 0\n    for i in range(2, len(l), 3):\n        result[i] = thirds[j]\n        j += 1\n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = l[:]  # copy the original list\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(n: int) -> bool:\n    \"\"\"\n    is_prime checks if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 1\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # First, sort the list in ascending order\n    l.sort()\n    \n    # Iterate over the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers, one at the next element and one at the end of the list\n        left, right = i + 1, len(l) - 1\n        \n        # Skip duplicates for the first element\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        # Move the pointers until they meet\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            \n            # If the total is zero, return True\n            if total == 0:\n                return True\n            # If the total is less than zero, move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the total is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n                \n    # If no three elements sum to zero, return False\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    return n * n"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if x == 0:  # base case\n        return '0'\n    result = ''\n    while x > 0:\n        result = str(x % base) + result  # convert remainder to string and add to result\n        x = x // base  # update x for next iteration\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0] + [0]*(n-3)\n        for i in range(3, n):\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4]\n        return fib[n]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"Return median of elements in the list l.\"\"\"\n    l.sort()\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 0:\n        return (l[mid - 1] + l[mid]) / 2\n    else:\n        return l[mid]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n\n    Args:\n        text (str): The input string to check\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    # Convert the string to lowercase to make the check case-insensitive\n    text = text.lower()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s.lower()])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s.lower()])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n    s0 (str): The first word.\n    s1 (str): The second word.\n    \n    Returns:\n    bool: True if the two words have the same characters, False otherwise.\n    \"\"\"\n    \n    # Convert both strings to sets, which automatically removes duplicates\n    set0 = set(s0)\n    set1 = set(s1)\n    \n    # Check if the two sets are equal\n    return set0 == set1"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n        if not (increasing or decreasing):\n            return False\n    return True"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(i for i in range(1, n + 1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(\"(\")\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    if len(xs) < 2:\n        return [0]\n    return [i * x for i, x in enumerate(xs) if i > 0]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib = [0] * (n + 1)\n        fib[0] = 0\n        fib[1] = 0\n        fib[2] = 1\n        for i in range(3, n + 1):\n            fib[i] = fib[i-1] + fib[i-2] + fib[i-3]\n        return fib[n]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    if s and s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = str(x)\n    num_digits = len(digits)\n    shift = shift % num_digits  # in case shift > num_digits\n    return digits[-shift:][::-1] + digits[:-shift][::-1][::-1]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, s.replace(\"apples\", \"\").replace(\"oranges\", \"\").replace(\"and\", \"\").split())\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    even_nodes.sort()\n    return even_nodes[0] if even_nodes else []"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    lst.sort(reverse=True)\n    for num in lst:\n        if freq[num] >= num > 0:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    lst_copy = lst[:]  # make a copy of the original list\n    while lst_copy:\n        result.append(min(lst_copy))\n        lst_copy.remove(min(lst_copy))\n        if lst_copy:\n            result.append(max(lst_copy))\n            lst_copy.remove(max(lst_copy))\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars1 <= total_chars2 else lst2"}
{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    count = 0\n    i = 2\n    factors = []\n    while i * i <= a:\n        if a % i:\n            i += 1\n        else:\n            a //= i\n            factors.append(i)\n            count += 1\n            if count > 3:\n                return False\n    if a > 1:\n        factors.append(a)\n        count += 1\n    if count != 3:\n        return False\n    for factor in factors:\n        if not is_prime(factor):\n            return False\n    return True"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if x <= 0 or n <= 0:\n        return False\n    root = round(x ** (1.0 / n))\n    return root ** n == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    b = int(round(a ** (1. / 3)))\n    return b ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(digit.upper() in prime_digits for digit in num)"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove the '0b' prefix\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grade = 'A+'\n        elif grade >= 3.7:\n            letter_grade = 'A'\n        elif grade >= 3.3:\n            letter_grade = 'A-'\n        elif grade >= 3.0:\n            letter_grade = 'B+'\n        elif grade >= 2.7:\n            letter_grade = 'B'\n        elif grade >= 2.3:\n            letter_grade = 'B-'\n        elif grade >= 2.0:\n            letter_grade = 'C+'\n        elif grade >= 1.7:\n            letter_grade = 'C'\n        elif grade >= 1.3:\n            letter_grade = 'C-'\n        elif grade >= 1.0:\n            letter_grade = 'D+'\n        elif grade >= 0.7:\n            letter_grade = 'D'\n        elif grade > 0.0:\n            letter_grade = 'D-'\n        else:\n            letter_grade = 'E'\n        letter_grades.append(letter_grade)\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Count of numbers that start with 1\n    start_with_one = 9 * (10 ** (n - 1))\n    \n    # Count of numbers that end with 1\n    end_with_one = 10 ** (n - 1)\n    \n    # Subtract the count of numbers that start and end with 1 to avoid double counting\n    start_and_end_with_one = 9 * (10 ** (n - 2)) if n > 1 else 0\n    \n    return start_with_one + end_with_one - start_and_end_with_one"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    digit_sum = sum(int(digit) for digit in binary)  # Calculate the sum of digits\n    return bin(digit_sum)[2:]  # Convert the sum to binary and remove the '0b' prefix"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(i for i in range(1, len(lst), 2) if lst[i] % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        indices = [j for j, val in enumerate(row) if val == x]\n        indices.sort(reverse=True)\n        result.extend((i, j) for j in indices)\n    result.sort()\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n    \n    first_last_sum = array[0] + array[-1]\n    sorted_array = array.copy()\n    \n    if first_last_sum % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 ** 2\n            char_code = ord(char.lower())\n            if char.isupper():\n                result += chr((char_code - 97 + shift) % 26 + 65).upper()\n            else:\n                result += chr((char_code - 97 + shift) % 26 + 97)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(set(lst)) < 2:  # if all elements are the same or list has less than 2 unique elements\n        return None\n    lst.sort()\n    return lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.replace(\"?\", \".\").replace(\"!\", \".\").split(\".\")\n    boredoms = sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].lower() == \"i\")\n    return boredoms"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in (x, y, z)):  # check if all inputs are integers\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            index = vowels.index(char.lower())\n            encoded_char = chr(ord('a') + (index + 2) % 5) if char.lower() == char else chr(ord('A') + (index + 2) % 5).lower()\n        else:\n            encoded_char = char.upper() if char.lower() == char else char.lower()\n        encoded_message += encoded_char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        largest_prime = max(primes)\n        return sum_of_digits(largest_prime)\n    else:\n        return 0"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:  # empty dictionary\n        return False\n    first_key = next(iter(dict))  # get the first key\n    if not isinstance(first_key, str):\n        return False  # keys must be strings\n    case = first_key.islower()  # check the case of the first key\n    for key in dict:\n        if not isinstance(key, str) or key.islower() != case:\n            return False\n    return True"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.upper() == c and c in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return int(round(num + 0.5) - (num == int(num + 0.5) - num))\n    else:\n        return int(round(num - 0.5) - (num == int(num - 0.5) - num))"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        if n % 2 == 0:  # n is even\n            n += 1 - (n % 2)  # add 1 to make it odd\n        pile.append(n + 2)  # add 2 to get the next level's stones\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(',', ' ').split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x  # swap x and y if x is greater than y\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:  # check if i is even\n            return i\n    return -1  # no even number found in the range"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        while n:\n            if n % 10 % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    return sorted(i for i in x if has_even_digit(i))"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    nums = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr = arr[::-1]\n    return [nums[x-1] for x in arr]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i is even\n            product = 1\n            for j in range(1, i + 1):\n                product *= j\n            result.append(product)\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        str_i = str(i)\n        if str_i == str_i[::-1]:  # Check if it's a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(abs(num)) if digit != '0')\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    arr.sort()\n    for i in range(len(arr)):\n        if arr == arr[i:] + arr[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    return \"YES\" if odd_count_lst1 <= even_count_lst2 else \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    words = test.split()\n    hist = {}\n    for word in words:\n        hist[word] = hist.get(word, 0) + 1\n    max_count = max(hist.values()) if hist else 0\n    return {k: v for k, v in hist.items() if v == max_count}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # delete all the characters in s that are equal to any character in c\n    result = ''.join(i for i in s if i not in c)\n    \n    # check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, i, i))\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = set('aeiou')\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    count1 = lst[0].count('(') - lst[0].count(')')\n    count2 = lst[1].count('(') - lst[1].count(')')\n    \n    if count1 * count2 >= 0:\n        return 'No'\n    else:\n        return 'Yes'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(i for i in lst[1::2] if i % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:  # n is even\n            n = n // 2\n        else:  # n is odd\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False  # invalid format\n    month, day, year = parts\n    if not (month.isdigit() and day.isdigit() and year.isdigit()):\n        return False  # non-numeric values\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False  # invalid month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month == 2:\n        max_day = 29  # assume leap year for simplicity\n    else:\n        max_day = 30\n    if day < 1 or day > max_day:\n        return False  # invalid day\n    return True  # valid date"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # Split on whitespace\n    words = txt.split()\n    if words:\n        return words\n    # If no whitespace, split on commas\n    words = txt.split(',')\n    if words:\n        return words\n    # If no commas, count lower-case letters with odd order in the alphabet\n    count = sum(1 for i, c in enumerate('abcdefghijklmnopqrstuvwxyz') if c in txt.lower() and i % 2 == 0)\n    return count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return lst == sorted(set(x for x in lst if lst.count(x) <= 1))"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path = [0] * k\n\n    def backtrack(path, x, y, step):\n        nonlocal min_path\n        if step == k:\n            min_path = min(min_path, path[:])\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                backtrack(path + [grid[nx][ny]], nx, ny, step + 1)\n\n    for i in range(N):\n        for j in range(N):\n            backtrack([grid[i][j]], i, j, 1)\n\n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    trib = [0]*(n+1)\n    trib[0] = 1\n    trib[1] = 3\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            trib[i] = 1 + i // 2\n        else:\n            trib[i] = trib[i-1] + trib[i-2] + trib[i-1]\n    return trib"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    all_even = True\n    while n:\n        digit = n % 10\n        n //= 10\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n    return product if not all_even else 0"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n                if stack:\n                    nested = True\n            else:\n                return False\n    return nested and not stack"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if not words:  # empty string\n        return False\n    last_word = words[-1]\n    if not last_word:  # last word is empty (i.e., string ends with space)\n        return False\n    last_char = last_word[-1]\n    return last_char.isalpha() and len(last_word) == 1"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if i > 0 and arr[i] <= arr[i - 1]:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negative_nums = [x for x in lst if x < 0]\n    positive_nums = [x for x in lst if x > 0]\n    \n    largest_negative = max(negative_nums) if negative_nums else None\n    smallest_positive = min(positive_nums) if positive_nums else None\n    \n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Convert strings to floats, handling both . and , as decimal separators\n    if isinstance(a, str):\n        a = float(a.replace(',', '.')) if ',' in a else float(a)\n    if isinstance(b, str):\n        b = float(b.replace(',', '.')) if ',' in b else float(b)\n\n    # Compare values\n    if a > b:\n        return a if isinstance(a, type(b)) else type(b)(a)\n    elif a < b:\n        return b if isinstance(a, type(b)) else type(a)(b)\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 3:\n        return False\n    for a in range(2, n, 2):\n        for b in range(a, n, 2):\n            for c in range(b, n, 2):\n                for d in range(c, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        temp = 1\n        for j in range(1, i + 1):\n            temp *= j\n        result *= temp\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    parts = text.split()\n    new_parts = []\n    consecutive_spaces = 0\n    for part in parts:\n        if part == \"\":\n            consecutive_spaces += 1\n        else:\n            if consecutive_spaces > 1:\n                new_parts.append(\"-\" * (consecutive_spaces - 1))\n            elif consecutive_spaces > 0:\n                new_parts.append(\"_\")\n            new_parts.append(part)\n            consecutive_spaces = 0\n    if consecutive_spaces > 1:\n        new_parts.append(\"-\" * (consecutive_spaces - 1))\n    elif consecutive_spaces > 0:\n        new_parts.append(\"_\")\n    return \"\".join(new_parts)"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if there are more than three digits in the file's name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the file's name contains exactly one dot\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    # Check if the substring before the dot is not empty and starts with a letter\n    prefix = parts[0]\n    if not prefix or not prefix[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    extension = parts[1]\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # If all checks pass, the file's name is valid\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    gcd = lambda a, b: a if not b else gcd(b, a % b)\n    common_divisor = gcd(result_num, result_den)\n    return result_den // common_divisor == 1"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted((x for x in nums), key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x) if x in nums else float('inf')))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and abs(num) >= 10:\n            first_digit = num // abs(num) // (10 ** (len(str(abs(num))) - 1))\n            last_digit = abs(num) % 10\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planet for planet in planets[idx1+1:idx2] if planet != planet1 and planet != planet2)"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def strength(ext):\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        return cap - sm\n\n    strongest_ext = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    num = abs(num)  # ignore the sign of the number\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4, 1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\", \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return a**2 + b**2 == c**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    remaining_carrots = max(0, remaining - (total_eaten - number))\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    assert len(operator) == len(operand) - 1, \"Invalid input: operator list length must be one less than operand list length\"\n    assert all(op in \"+-*///\" for op in operator), \"Invalid input: operator list must only contain +, -, *, //\"\n    assert all(isinstance(x, int) and x >= 0 for x in operand), \"Invalid input: operand list must only contain non-negative integers\"\n    \n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == \"+\":\n            result += num\n        elif op == \"-\":\n            result -= num\n        elif op == \"*\":\n            result *= num\n        elif op == \"//\":\n            result //= num\n    \n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            result += char.swapcase()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1, 1) if i % 2 == 0]"}
