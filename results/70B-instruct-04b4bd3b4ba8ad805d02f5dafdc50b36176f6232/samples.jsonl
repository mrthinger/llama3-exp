{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n        threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n        bool: True if there are two numbers in the list that are closer to each other than the threshold, False otherwise.\n    \"\"\"\n    # Sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        diff = numbers[i + 1] - numbers[i]\n        \n        # If the difference is less than or equal to the threshold, return True\n        if diff <= threshold:\n            return True\n    \n    # If no two numbers are closer than the threshold, return False\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    groups = []\n    temp = \"\"\n    stack = []\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            temp += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    groups.append(temp)\n                    temp = \"\"\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Detects if the balance of a bank account falls below zero at any point.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance falls below zero, False otherwise.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    Args:\n        numbers (List[float]): A list of floating point numbers.\n    \n    Returns:\n        float: The Mean Absolute Deviation of the input list.\n    \"\"\"\n    \n    # Calculate the mean of the input list\n    mean = statistics.mean(numbers)\n    \n    # Initialize a list to store the absolute deviations\n    abs_deviations = []\n    \n    # Calculate the absolute deviation for each number in the list\n    for num in numbers:\n        abs_deviations.append(abs(num - mean))\n    \n    # Calculate the mean of the absolute deviations\n    mad = statistics.mean(abs_deviations)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of multiple groups of nested parentheses separated by spaces.\n    It returns a list of integers, where each integer represents the deepest level of nesting of parentheses in each group.\n\n    :param paren_string: A string of multiple groups of nested parentheses separated by spaces.\n    :return: A list of integers, where each integer represents the deepest level of nesting of parentheses in each group.\n    \"\"\"\n    groups = paren_string.split()  # Split the input string into groups\n    max_depths = []  # Initialize a list to store the maximum depth of each group\n\n    for group in groups:\n        max_depth = 0  # Initialize the maximum depth of the current group\n        curr_depth = 0  # Initialize the current depth of the current group\n        for char in group:\n            if char == '(':  # If the character is an open parenthesis, increase the current depth\n                curr_depth += 1\n                max_depth = max(max_depth, curr_depth)  # Update the maximum depth\n            elif char == ')':  # If the character is a close parenthesis, decrease the current depth\n                curr_depth -= 1\n        max_depths.append(max_depth)  # Append the maximum depth of the current group to the result list\n\n    return max_depths\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n\n    Args:\n        strings (List[str]): The input list of strings\n        substring (str): The substring to filter by\n\n    Returns:\n        List[str]: A new list containing only the strings that contain the substring\n    \"\"\"\n    # Use a list comprehension to create a new list containing only the strings that contain the substring\n    # The 'if' clause in the list comprehension is a filter that only includes strings where the substring is found\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nimport math\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    total_sum = sum(numbers)  # Calculate the sum of all numbers in the list\n    total_product = math.prod(numbers) if numbers else 1  # Calculate the product of all numbers in the list, or 1 if the list is empty\n    return total_sum, total_product  # Return the sum and product as a tuple"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n    \"\"\"\n    rolling_maxes = [numbers[0]]  # Initialize with the first element\n    for num in numbers[1:]:  # Iterate over the rest of the list\n        rolling_maxes.append(max(rolling_maxes[-1], num))  # Append the max of the current num and the previous max\n    return rolling_maxes"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must be of the same length\")\n    result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): A list of strings\n\n    Returns:\n        Optional[str]: The longest string in the list, or None if the list is empty\n    \"\"\"\n    # If the list is empty, return None\n    if not strings:\n        return None\n    \n    # Initialize the longest string with the first string in the list\n    longest_str = strings[0]\n    \n    # Iterate over the rest of the strings in the list\n    for s in strings[1:]:\n        # If the current string is longer than the longest string, update the longest string\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    # Return the longest string\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    This function calculates the greatest common divisor (GCD) of two integers a and b.\n    \n    The GCD of two or more integers, when not zero, is the largest positive integer that divides each of the integers without a remainder.\n    \n    The function uses the Euclidean algorithm, which is an efficient method for computing the GCD of two numbers.\n    \n    :param a: The first integer.\n    :param b: The second integer.\n    :return: The greatest common divisor of a and b.\n    \"\"\"\n    \n    # If b is 0, the GCD is a\n    if b == 0:\n        return a\n    else:\n        # Recursively call the function with b and the remainder of a divided by b\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(c.lower() for c in string))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a music string in a special ASCII format and return a list of integers representing the number of beats each note lasts.\n\n    :param music_string: A string representing musical notes in a special ASCII format.\n    :return: A list of integers corresponding to how many beats does each note last.\n    \"\"\"\n    # Split the input string into a list of notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the durations of each note\n    durations = []\n\n    # Iterate over each note in the list of notes\n    for note in notes:\n        # Check the type of note and append the corresponding duration to the durations list\n        if note == 'o':\n            durations.append(4)  # whole note, lasts 4 beats\n        elif note == 'o|':\n            durations.append(2)  # half note, lasts 2 beats\n        elif note == '.|':\n            durations.append(1)  # quarter note, lasts 1 beat\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n\n    # Return the list of durations\n    return durations"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"task_id": "HumanEval/19", "solution": "from typing import List, Dict\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list: List[str] = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Generate all possible pairs of numbers\n    pairs = list(itertools.combinations(numbers, 2))\n    \n    # Find the pair with the minimum difference\n    closest_pair = min(pairs, key=lambda x: abs(x[0] - x[1]))\n    \n    # Return the pair in order (smaller number, larger number)\n    return tuple(sorted(closest_pair))"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Create an ordered dictionary from the list of numbers\n    # This will automatically remove duplicates while preserving the original order\n    ordered_dict = OrderedDict((x, True) for x in numbers)\n    \n    # Convert the ordered dictionary back to a list\n    result = list(ordered_dict.keys())\n    \n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\n    Concatenate a list of strings into a single string.\n\n    Args:\n        strings (List[str]): A list of strings to be concatenated.\n\n    Returns:\n        str: A single string that is the concatenation of all strings in the input list.\n    \"\"\"\n    # Initialize an empty string to store the concatenated result\n    result = \"\"\n\n    # Iterate over each string in the input list\n    for string in strings:\n        # Append the current string to the result\n        result += string\n\n    # Return the concatenated string\n    return result"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n\n    Returns:\n        List[str]: A new list containing only the strings that start with the given prefix.\n    \"\"\"\n    # Use a list comprehension to create a new list containing only the strings that start with the prefix\n    # The 'if' clause in the list comprehension filters out the strings that don't start with the prefix\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_prime(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 == 1:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    if xs[-1] == 0:\n        raise ValueError(\"The list of coefficients must have a non-zero highest degree coefficient.\")\n    \n    # Start with an initial guess\n    x = 0.0\n    for _ in range(1000):  # Run for a maximum of 1000 iterations\n        fx = poly(xs, x)\n        if abs(fx) < 1e-10:  # Check for convergence\n            return x\n        fpx = poly_prime(xs, x)\n        if fpx == 0:  # Check for a vertical tangent\n            raise ValueError(\"The polynomial has a vertical tangent at this point.\")\n        x = x - fx / fpx  # Update the estimate using Newton-Raphson\n    raise RuntimeError(\"Failed to converge.\")"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    Returns a new list where every third element is sorted, and the rest are the same as the original list.\n    \"\"\"\n    # Split the list into three lists: one for indices not divisible by 3, one for indices 1 mod 3, and one for indices 2 mod 3\n    not_divisible_by_3 = [x for i, x in enumerate(l) if i % 3 != 0]\n    divisible_by_3 = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    # Interleave the three lists to get the final result\n    result = [None] * len(l)\n    result[::3], result[1::3], result[2::3] = divisible_by_3[:(len(l)+2)//3], not_divisible_by_1, not_divisible_by_2\n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    even_indices = [i for i, x in enumerate(l) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = [x if i % 2 != 0 else even_values.pop(0) for i, x in enumerate(l)]\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef fibonacci() -> iter:\n    \"\"\"Generate Fibonacci numbers.\"\"\"\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the nth number that is both a Fibonacci number and a prime number.\"\"\"\n    fib_gen = fibonacci()\n    count = 0\n    while True:\n        num = next(fib_gen)\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # First, we sort the list in non-decreasing order\n    l.sort()\n    \n    # We iterate over the list\n    for i in range(len(l) - 2):\n        # We skip the same result\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        # We initialize two pointers\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            # We calculate the sum of three elements\n            total = l[i] + l[left] + l[right]\n            # If the sum is equal to zero, we return True\n            if total == 0:\n                return True\n            # If the sum is less than zero, we move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the sum is greater than zero, we move the right pointer to the left\n            else:\n                right -= 1\n    # If we haven't found three elements that sum to zero, we return False\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    return n ** 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(3, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"\n    Return the median of elements in the list l.\n    \"\"\"\n    l.sort()  # sort the list in ascending order\n    n = len(l)  # get the length of the list\n    mid = n // 2  # calculate the middle index\n\n    # if the list has an odd number of elements, return the middle element\n    if n % 2 == 1:\n        return l[mid]\n    # if the list has an even number of elements, return the average of the two middle elements\n    else:\n        return (l[mid - 1] + l[mid]) / 2.0"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n\n    Args:\n        text (str): The input string to be checked\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"\n    This function calculates the sum of all numbers from 1 to n.\n\n    Args:\n        n (int): The last number to be included in the sum.\n\n    Returns:\n        int: The sum of all numbers from 1 to n.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over all numbers from 1 to n (inclusive)\n    for i in range(1, n + 1):\n        # Add the current number to the sum\n        total += i\n    \n    # Return the calculated sum\n    return total"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    return [i * x for i, x in enumerate(xs[1:], start=1)]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = [int(d) for d in str(x)]  # convert x to a list of digits\n    num_digits = len(digits)\n    shift = shift % num_digits  # handle shift > num_digits\n    return ''.join(map(str, digits[-shift:] + digits[:-shift]))  # circular shift and join"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Split the input string into two parts: \"x apples\" and \"y oranges\"\n    parts = s.split(\" and \")\n    apples = int(parts[0].split()[0])\n    oranges = int(parts[1].split()[0])\n    # Calculate the number of mangoes by subtracting apples and oranges from the total\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]\n    if not even_nodes:\n        return []\n    return [min(even_nodes, key=lambda x: (x[0], x[1]))[0], min(even_nodes, key=lambda x: (x[0], x[1]))[1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 <= total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            a //= i\n            i -= 1\n    return count >= 3"}
{"task_id": "HumanEval/76", "solution": "import math\n\ndef is_simple_power(x, n):\n    root = round(x ** (1.0 / n))\n    return root ** n == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    return round(a**(1/3))**3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if hex_to_dec[digit] in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_div = int(n**0.5) + 1\n    for i in range(3, max_div, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(s):\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Count of n-digit numbers that start with 1\n    start_with_one = 9 * (10 ** (n - 1))\n    \n    # Count of n-digit numbers that end with 1\n    end_with_one = 10 ** (n - 1)\n    \n    # Remove the count of numbers that start and end with 1 (to avoid double counting)\n    start_and_end_with_one = 9 * (10 ** (n - 2)) if n > 1 else 0\n    \n    # Return the total count\n    return start_with_one + end_with_one - start_and_end_with_one"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary string\n    digit_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    result = bin(digit_sum)[2:]\n    \n    return result"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:  # edge case: empty array\n        return []\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:  # sum is even, sort in descending order\n        return sorted(array, reverse=True)\n    else:  # sum is odd, sort in ascending order\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            result += chr((ord(char) - ascii_offset + 2**2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    min1, min2 = float('inf'), float('inf')\n    for x in lst:\n        if x <= min1:\n            min1, min2 = x, min1\n        elif x < min2 and x != min1:\n            min2 = x\n    if min2 == float('inf'):\n        return None\n    return min2"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for s in sentences if s.strip() and s[0].lower() == 'i')"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in (x, y, z)):  # check if all numbers are integers\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():  # only consider letters\n            if char in vowels:\n                if char.islower():\n                    encoded_char = chr((ord(char) - 97 + 2) % 26 + 97)\n                else:\n                    encoded_char = chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:  # if the dictionary is empty, return False\n        return False\n    key_cases = [k.islower() for k in d if isinstance(k, str)]  # check case of each key\n    return all(key_cases) or all(not c for c in key_cases)  # return True if all keys have same case"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and num < n:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return abs(a % 10) * abs(b % 10)"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and c in 'AEIOU')"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return -(-num // 1) if num < 0 else num // 1 + 1\n    else:\n        return round(num)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        if n % 2 == 0:  # n is even\n            n += 1\n            if n % 2 == 0:  # make sure n is odd\n                n += 1\n        else:  # n is odd\n            n += 2\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1\n    max_even = -1\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            max_even = i\n            break\n    return max_even"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([i for i in x if not has_even_digit(i)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers not between 1 and 9 (inclusive)\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the array\n    arr = arr[::-1]\n    \n    # Replace each digit with its corresponding name\n    names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [names[x] for x in arr]\n    \n    return arr"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # i is odd\n            sum_of_numbers = sum(range(1, i+1))\n            result.append(sum_of_numbers)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:  # Check if the number is even\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit.lstrip('-')) for digit in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    arr_sorted = sorted(arr)\n    for i in range(n):\n        if arr[i:] + arr[:i] == arr_sorted:\n            return True\n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_in_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    odd_in_lst1 = len(lst1) - even_in_lst1\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    odd_in_lst2 = len(lst2) - even_in_lst2\n    \n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    words = test.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    if not word_count:\n        return {}\n    max_count = max(word_count.values())\n    return {word: count for word, count in word_count.items() if count == max_count}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # delete all the characters in s that are equal to any character in c\n    new_s = ''.join([i for i in s if i not in c])\n    \n    # check if the result string is palindrome\n    is_palindrome = new_s == new_s[::-1]\n    \n    return new_s, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c in '13579' for c in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, i, i))\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return -(-total_water // capacity)  # equivalent to math.ceil(total_water / capacity)\n\n# Test cases\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted((x for x in arr if x >= 0), key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word.lower() if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    # Calculate the difference between open and close parentheses in each string\n    diff1 = lst[0].count('(') - lst[0].count(')')\n    diff2 = lst[1].count('(') - lst[1].count(')')\n\n    # If the sum of the differences is not zero, it's not possible to make a good string\n    if diff1 + diff2 != 0:\n        return 'No'\n\n    # If the absolute difference between the differences is more than 1, it's not possible to make a good string\n    if abs(diff1) > 1 or abs(diff2) > 1:\n        return 'No'\n\n    # If we haven't returned 'No' yet, it's possible to make a good string\n    return 'Yes'"}
{"task_id": "HumanEval/120", "solution": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr), reverse=True)"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    def collatz(x):\n        while x != 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n            yield x\n\n    odd_numbers = [x for x in collatz(n) if x % 2 != 0] + [n]\n    return sorted(odd_numbers)"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Returns True if the date is valid, False otherwise.\n    \"\"\"\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False  # invalid date format\n\n    month, day, year = parts\n\n    # Check if the month is valid (1-12)\n    if not month.isdigit() or not 1 <= int(month) <= 12:\n        return False\n\n    # Check if the day is valid (1-31 or 1-30 or 1-29)\n    if not day.isdigit():\n        return False\n    day = int(day)\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:  # 31 days\n        if not 1 <= day <= 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:  # 30 days\n        if not 1 <= day <= 30:\n            return False\n    else:  # February (29 days)\n        if not 1 <= day <= 29:\n            return False\n\n    # Check if the year is valid (any 4-digit year)\n    if not year.isdigit() or len(year) != 4:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt.lower() if (ord(c) - 97) % 2 == 1)"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return lst == sorted(lst, key=lambda x: (-lst.count(x), x))"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of the intersection of two intervals is a prime number.\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_prod = 1\n    mag_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_prod *= 1\n        elif num < 0:\n            sign_prod *= -1\n        else:\n            sign_prod *= 0\n        mag_sum += abs(num)\n    return sign_prod * mag_sum"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\n\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(grid[0][0], [(0, 0)])])\n    visited = {(0, 0)}\n    res = float('inf')\n\n    while queue:\n        val, path = queue.popleft()\n        if len(path) == k:\n            if val < res:\n                res = val\n                ans = [grid[i][j] for i, j in path]\n        else:\n            for dx, dy in directions:\n                x, y = path[-1]\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    queue.append((val * (10 ** len(str(grid[nx][ny]))) + grid[nx][ny], path + [(nx, ny)]))\n\n    return ans"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    trib = [0]*(n+1)\n    trib[0] = 1\n    trib[1] = 3\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            trib[i] = 1 + i // 2\n        else:\n            trib[i] = trib[i-1] + trib[i-2] + trib[i-1]\n    return trib"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:  # even digit\n            return 0\n        product *= digit\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) == 0:\n                return False\n            elif len(stack) > 1:\n                return True\n            else:\n                stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(i**2 for i in map(lambda x: -math.ceil(-x) if x < 0 else math.ceil(x), lst))"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():  # if the string is empty or only whitespace, return False\n        return False\n    words = txt.split()  # split the string into words\n    last_word = words[-1]  # get the last word\n    if len(last_word) == 1 and last_word.isalpha():  # if the last word has only 1 char and it's a letter\n        return True\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negs = [x for x in lst if x < 0]\n    poss = [x for x in lst if x > 0]\n    if negs:\n        a = max(negs)\n    else:\n        a = None\n    if poss:\n        b = min(poss)\n    else:\n        b = None\n    return a, b"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Normalize inputs to floats, handling commas as decimal separators\n    a_val = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b_val = float(b.replace(',', '.')) if isinstance(b, str) else b\n\n    # Compare values\n    if a_val < b_val:\n        return b\n    elif a_val > b_val:\n        return a\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    for a in range(2, n, 2):\n        for b in range(a, n, 2):\n            for c in range(b, n, 2):\n                d = n - a - b - c\n                if d % 2 == 0 and d >= 2 and a + b + c + d == n:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\"  \", \"-\")  # replace 2+ consecutive spaces with -\n    return text.replace(\" \", \"_\")  # replace remaining spaces with _"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Split the file name into two parts: before and after the dot\n    parts = file_name.rsplit('.', 1)\n    if len(parts) != 2:\n        return 'No'  # must have exactly one dot\n\n    # Check the substring before the dot\n    before_dot = parts[0]\n    if not before_dot[0].isalpha():\n        return 'No'  # must start with a latin alphabet letter\n    if sum(c.isdigit() for c in before_dot) > 3:\n        return 'No'  # must not have more than three digits\n\n    # Check the substring after the dot\n    after_dot = parts[1]\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'  # must be one of the allowed extensions\n\n    return 'Yes'  # all conditions are met"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            total += x ** 2\n        elif i % 4 == 0:\n            total += x ** 3\n        else:\n            total += x\n    return total"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "from fractions import Fraction\n\ndef simplify(x, n):\n    num1, den1 = map(int, x.split('/'))\n    num2, den2 = map(int, n.split('/'))\n    frac1 = Fraction(num1, den1)\n    frac2 = Fraction(num2, den2)\n    prod = frac1 * frac2\n    return prod.denominator == 1"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted((x for x in nums), key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num) % 10) % 2 != 0 and int(str(abs(num))[0]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/149", "solution": "def list_sort(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(ext):\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        return cap - sm\n\n    strongest_ext = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any of the rotations is a substring of the first word\n    for r in rotations:\n        if r in a:\n            return True\n    \n    # If no rotation is a substring, return False\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(n):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(n)):  # convert to string to iterate over digits\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    # Sort the sides in non-decreasing order\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return c**2 == a**2 + b**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = remaining - (total_eaten - number)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operators, operands):\n    # Initialize the result with the first operand\n    result = operands[0]\n    \n    # Iterate over the operators and the rest of the operands\n    for i in range(len(operators)):\n        # Get the current operator and operand\n        operator = operators[i]\n        operand = operands[i + 1]\n        \n        # Perform the operation\n        if operator == '+':\n            result += operand\n        elif operator == '-':\n            result -= operand\n        elif operator == '*':\n            result *= operand\n        elif operator == '//':\n            result = result // operand\n        elif operator == '**':\n            result = result ** operand\n    \n    # Return the final result\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():  # if c is a letter\n            has_letter = True\n            result += c.swapcase()  # reverse case\n        else:\n            result += c  # keep non-letters as is\n    if not has_letter:  # if no letters, reverse the string\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    m = hashlib.md5()\n    m.update(text.encode('utf-8'))\n    return m.hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Ensure a is the smaller number and b is the larger number\n    a, b = min(a, b), max(a, b)\n    # Use a list comprehension to generate the even digits between a and b\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
