{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n        threshold (float): The minimum distance between two numbers.\n\n    Returns:\n        bool: True if any two numbers are closer than the threshold, False otherwise.\n    \"\"\"\n    \n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize a variable to store the result\n    result = False\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        difference = numbers[i + 1] - numbers[i]\n        \n        # Check if the difference is less than or equal to the threshold\n        if difference <= threshold:\n            # If it is, set the result to True and break the loop\n            result = True\n            break\n    \n    # Return the result\n    return result"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # remove spaces\n    groups = []\n    current_group = \"\"\n    stack = []\n    \n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    groups.append(current_group)\n                    current_group = \"\"\n    \n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function takes a list of deposit and withdrawal operations on a bank account \n    that starts with zero balance. It detects if at any point the balance of account \n    falls below zero, and at that point function returns True. Otherwise it returns False.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance falls below zero, False otherwise.\n    \"\"\"\n    balance = 0  # Initialize the balance to zero\n    for operation in operations:  # Iterate over each operation\n        balance += operation  # Update the balance\n        if balance < 0:  # Check if the balance falls below zero\n            return True  # If it does, return True\n    return False  # If the balance never falls below zero, return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    This function calculates the Mean Absolute Deviation (MAD) of a given list of numbers.\n    \n    MAD is the average absolute difference between each element and the mean of the dataset.\n    \n    Parameters:\n    numbers (List[float]): A list of floating point numbers.\n    \n    Returns:\n    float: The Mean Absolute Deviation of the input list.\n    \"\"\"\n    \n    # Calculate the mean of the input list\n    mean = statistics.mean(numbers)\n    \n    # Initialize a variable to store the sum of absolute deviations\n    sum_of_deviations = 0\n    \n    # Iterate over each number in the input list\n    for num in numbers:\n        # Calculate the absolute deviation of the current number from the mean\n        deviation = abs(num - mean)\n        \n        # Add the deviation to the sum\n        sum_of_deviations += deviation\n    \n    # Calculate the Mean Absolute Deviation by dividing the sum of deviations by the number of elements\n    mad = sum_of_deviations / len(numbers)\n    \n    # Return the Mean Absolute Deviation\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n\n    Args:\n        numbers (List[int]): The input list of numbers\n        delimiter (int): The number to be inserted between every two consecutive elements\n\n    Returns:\n        List[int]: The resulting list with the delimiter inserted\n    \"\"\"\n    \n    # If the input list is empty, return an empty list\n    if not numbers:\n        return []\n    \n    # Initialize the result list with the first element of the input list\n    result = [numbers[0]]\n    \n    # Iterate over the input list starting from the second element\n    for num in numbers[1:]:\n        # Append the delimiter to the result list\n        result.append(delimiter)\n        # Append the current number to the result list\n        result.append(num)\n    \n    # Return the resulting list\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of multiple groups of nested parentheses separated by spaces.\n    It returns a list of integers, where each integer represents the deepest level of nesting of parentheses in each group.\n\n    :param paren_string: A string of multiple groups of nested parentheses separated by spaces.\n    :return: A list of integers, where each integer represents the deepest level of nesting of parentheses in each group.\n    \"\"\"\n    groups = paren_string.split()  # Split the input string into groups of parentheses\n    max_levels = []  # Initialize a list to store the maximum levels of nesting for each group\n\n    for group in groups:  # Iterate over each group of parentheses\n        max_level = 0  # Initialize the maximum level of nesting for the current group\n        current_level = 0  # Initialize the current level of nesting\n        for char in group:  # Iterate over each character in the group\n            if char == '(':  # If the character is an opening parenthesis\n                current_level += 1  # Increase the current level of nesting\n                max_level = max(max_level, current_level)  # Update the maximum level of nesting\n            elif char == ')':  # If the character is a closing parenthesis\n                current_level -= 1  # Decrease the current level of nesting\n        max_levels.append(max_level)  # Add the maximum level of nesting for the current group to the list\n\n    return max_levels  # Return the list of maximum levels of nesting for all groups"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring.\n\n    Args:\n        strings (List[str]): The input list of strings.\n        substring (str): The substring to filter by.\n\n    Returns:\n        List[str]: A list of strings that contain the given substring.\n    \"\"\"\n    # Use a list comprehension to create a new list that only includes strings\n    # from the input list that contain the given substring\n    return [string for string in strings if substring in string]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nimport math\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    This function calculates the sum and product of a list of integers.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the input list.\n    \"\"\"\n    \n    # Initialize sum to 0 and product to 1\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Add the number to the total sum\n        total_sum += num\n        # Multiply the number to the total product\n        total_product *= num\n    \n    # Return the total sum and product as a tuple\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n    \"\"\"\n    # Initialize an empty list to store the rolling maximum elements\n    rolling_max_elements = []\n    \n    # Initialize the maximum element to negative infinity\n    max_element = float('-inf')\n    \n    # Iterate over the input list of numbers\n    for num in numbers:\n        # Update the maximum element if the current number is greater\n        max_element = max(max_element, num)\n        \n        # Append the current maximum element to the result list\n        rolling_max_elements.append(max_element)\n    \n    # Return the list of rolling maximum elements\n    return rolling_max_elements"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[:i+1]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    This function performs binary XOR operation on two input strings a and b.\n    The input strings should consist only of 1s and 0s.\n    \n    Args:\n        a (str): The first input string.\n        b (str): The second input string.\n    \n    Returns:\n        str: The result of the binary XOR operation as a string.\n    \"\"\"\n    \n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Iterate over the characters in the input strings\n    for char_a, char_b in zip(a, b):\n        # Perform XOR operation on the current characters\n        # The XOR operation is equivalent to (char_a != char_b)\n        # We convert the result to an integer (0 or 1) and then to a string\n        result += str(int(char_a != char_b))\n    \n    # Return the result\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of a list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): A list of strings.\n\n    Returns:\n        Optional[str]: The longest string in the list, or None if the list is empty.\n    \"\"\"\n    \n    # If the list is empty, return None\n    if not strings:\n        return None\n    \n    # Initialize the longest string with the first string in the list\n    longest_str = strings[0]\n    \n    # Iterate over the rest of the strings in the list\n    for string in strings[1:]:\n        # If the current string is longer than the longest string, update the longest string\n        if len(string) > len(longest_str):\n            longest_str = string\n    \n    # Return the longest string\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    This function calculates the greatest common divisor (GCD) of two integers a and b.\n    \n    The GCD of two numbers is the largest number that divides both of them without leaving a remainder.\n    \n    The function uses the Euclidean algorithm, which is an efficient method for computing the GCD of two numbers.\n    \n    :param a: The first integer.\n    :param b: The second integer.\n    :return: The greatest common divisor of a and b.\n    \"\"\"\n    \n    # If b is 0, the GCD is a\n    if b == 0:\n        return a\n    \n    # Otherwise, the GCD of a and b is the same as the GCD of b and the remainder of a divided by b\n    else:\n        return greatest_common_divisor(b, a % b)"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\"\n    This function generates a string containing space-delimited numbers \n    starting from 0 up to n inclusive.\n\n    Args:\n        n (int): The upper limit of the sequence.\n\n    Returns:\n        str: A string containing space-delimited numbers from 0 to n.\n    \"\"\"\n    \n    # Initialize an empty list to store the numbers\n    num_list = []\n    \n    # Generate the sequence of numbers from 0 to n\n    for i in range(n + 1):\n        num_list.append(str(i))\n    \n    # Join the numbers in the list with a space delimiter\n    sequence_str = ' '.join(num_list)\n    \n    # Return the resulting string\n    return sequence_str"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of\n\n    Args:\n        string (str): The input string\n\n    Returns:\n        int: The number of distinct characters in the string\n    \"\"\"\n    # Convert the string to lowercase to ignore case differences\n    string_lower = string.lower()\n    # Use a set to store unique characters, since sets automatically remove duplicates\n    unique_chars = set(string_lower)\n    # Return the number of unique characters\n    return len(unique_chars)"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n        else:\n            raise ValueError(f\"Unknown note: {note}\")\n    return durations"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    This function finds how many times a given substring can be found in the original string.\n    It counts overlapping cases.\n\n    Args:\n        string (str): The original string.\n        substring (str): The substring to be found.\n\n    Returns:\n        int: The number of times the substring can be found in the string.\n    \"\"\"\n    # Initialize a counter to store the number of times the substring is found\n    count = 0\n    \n    # Iterate over the string with a sliding window of the length of the substring\n    for i in range(len(string) - len(substring) + 1):\n        # Check if the substring matches the current window\n        if string[i:i + len(substring)] == substring:\n            # If it matches, increment the counter\n            count += 1\n    \n    # Return the count\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import Dict\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    This function takes a string of space-delimited numberals from 'zero' to 'nine',\n    sorts them from smallest to largest, and returns the sorted string.\n\n    Args:\n        numbers (str): A string of space-delimited numberals.\n\n    Returns:\n        str: The sorted string of numberals.\n    \"\"\"\n    \n    # Create a dictionary to map numberals to their corresponding integer values\n    num_dict: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of numberals\n    num_list: List[str] = numbers.split()\n    \n    # Sort the list of numberals based on their corresponding integer values\n    num_list.sort(key=lambda x: num_dict[x])\n    \n    # Join the sorted list of numberals into a string separated by spaces\n    sorted_numbers: str = ' '.join(num_list)\n    \n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers in the list, in order.\n    \"\"\"\n    \n    # First, sort the list of numbers in ascending order\n    numbers.sort()\n    \n    # Initialize the minimum difference and the closest pair of numbers\n    min_diff = float('inf')  # Initialize with positive infinity\n    closest_pair = ()  # Initialize with an empty tuple\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        diff = numbers[i + 1] - numbers[i]\n        \n        # If the difference is less than the minimum difference found so far, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    # Return the closest pair of numbers\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n\n    Returns:\n        List[float]: The rescaled list of numbers.\n    \"\"\"\n    \n    # Check if the list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements\")\n    \n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Calculate the range of the values\n    val_range = max_val - min_val\n    \n    # If all values are the same, return a list of zeros\n    if val_range == 0:\n        return [0.0] * len(numbers)\n    \n    # Apply the linear transformation to each number in the list\n    rescaled_numbers = [(num - min_val) / val_range for num in numbers]\n    \n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter given list of any python values only for integers\n\n    Args:\n        values (List[Any]): A list of any python values\n\n    Returns:\n        List[int]: A list of integers\n    \"\"\"\n    # Use list comprehension to iterate over the input list\n    # and include only the elements that are instances of int\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    This function finds the largest number that divides n evenly, smaller than n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The largest divisor of n, smaller than n.\n    \"\"\"\n    \n    # We start from n-1 because the largest divisor cannot be n itself\n    for i in range(n-1, 0, -1):\n        # Check if i is a divisor of n\n        if n % i == 0:\n            # If i is a divisor, return it\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    # We start from 2, the smallest prime number\n    while i * i <= n:\n        # If i is a factor of n, we add it to the list and divide n by i\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    # If n is a prime number greater than 2\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A list of integers with duplicates removed.\n    \"\"\"\n    # Create an empty dictionary to store the count of each number\n    count_dict = {}\n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate over the input list\n    for num in numbers:\n        # If the number is not in the dictionary, add it with a count of 1\n        if num not in count_dict:\n            count_dict[num] = 1\n        # If the number is already in the dictionary, increment its count\n        else:\n            count_dict[num] += 1\n    \n    # Iterate over the input list again\n    for num in numbers:\n        # If the count of the number is 1, add it to the result list\n        if count_dict[num] == 1:\n            result.append(num)\n    \n    # Return the result list\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n\n    Returns:\n        List[str]: A list of strings that start with the given prefix.\n    \"\"\"\n    # Use a list comprehension to create a new list that only includes strings that start with the prefix\n    return [string for string in strings if string.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient must be non-zero\")\n\n    # Initial guess\n    x = 0.0\n\n    # Newton-Raphson method\n    for _ in range(1000):  # max 1000 iterations\n        fx = poly(xs, x)\n        if abs(fx) < 1e-6:  # convergence criterion\n            return x\n        dfx = derivative(xs, x)\n        x = x - fx / dfx\n\n    raise RuntimeError(\"Failed to converge\")"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    Returns a list l' such that l' is identical to l in the indices that are not divisible by three,\n    while its values at the indices that are divisible by three are equal to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    result = []\n    temp = []\n    for i, elem in enumerate(l):\n        if i % 3 == 0:\n            temp.append(elem)\n        else:\n            result.append(elem)\n    temp.sort()\n    result[::3] = temp\n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Args:\n        n (int): The upper limit.\n\n    Returns:\n        int: The number of times the digit 7 appears.\n    \"\"\"\n    count = 0  # Initialize a counter to store the number of times the digit 7 appears.\n    \n    # Iterate over all numbers less than n.\n    for i in range(n):\n        # Check if the number is divisible by 11 or 13.\n        if i % 11 == 0 or i % 13 == 0:\n            # Convert the number to a string to easily iterate over its digits.\n            str_i = str(i)\n            # Count the number of times the digit 7 appears in the number.\n            count += str_i.count('7')\n    \n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = []\n    even_idx = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_values[even_idx])\n            even_idx += 1\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Checks if a number is prime.\n    \n    Args:\n    num (int): The number to check.\n    \n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and it's also prime.\n    \n    Args:\n    n (int): The position of the prime Fibonacci number to return.\n    \n    Returns:\n    int: The n-th prime Fibonacci number.\n    \"\"\"\n    a, b = 0, 1  # Initialize the first two Fibonacci numbers\n    count = 0  # Initialize the count of prime Fibonacci numbers\n    while True:\n        a, b = b, a + b  # Generate the next Fibonacci number\n        if is_prime(b):  # Check if the generated Fibonacci number is prime\n            count += 1  # Increment the count if it's prime\n            if count == n:  # If the count reaches n, return the number\n                return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # First, sort the list in ascending order\n    l.sort()\n    \n    # Iterate over the list\n    for i in range(len(l) - 2):\n        # Skip the same result\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        \n        # Initialize two pointers\n        left, right = i + 1, len(l) - 1\n        \n        while left < right:\n            # Calculate the sum of three elements\n            total = l[i] + l[left] + l[right]\n            \n            # If the sum is zero, return True\n            if total == 0:\n                return True\n            # If the sum is less than zero, move the left pointer to the right\n            elif total < 0:\n                left += 1\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                right -= 1\n    \n    # If no three elements sum to zero, return False\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    return n * (n - 1)"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9\")\n    result = \"\"\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib = [0, 0, 2, 0]\n    for i in range(4, n+1):\n        fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n    \n    return fib[n]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"\n    This function calculates the median of a list of numbers.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        float: The median of the list.\n    \"\"\"\n    \n    # First, we sort the list in ascending order\n    l.sort()\n    \n    # Then, we find the length of the list\n    n = len(l)\n    \n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        return l[n // 2]\n    \n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome.\n\n    A palindrome is a string that reads the same backward as forward.\n\n    :param text: The input string to check.\n    :return: True if the string is a palindrome, False otherwise.\n    \"\"\"\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    This function converts the input strings into sets, which are unordered collections of unique elements.\n    It then compares these sets for equality. If the sets are equal, it means the original strings had the same characters.\n    \n    Parameters:\n    s0 (str): The first input string.\n    s1 (str): The second input string.\n    \n    Returns:\n    bool: True if the strings have the same characters, False otherwise.\n    \"\"\"\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    \n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\n    :param n: The input number\n    :return: The largest prime factor of n\n    \"\"\"\n    i = 2  # Start from 2, the smallest prime number\n    while i * i <= n:  # Only need to check up to sqrt(n)\n        if n % i:  # If n is not divisible by i\n            i += 1  # Increment i\n        else:\n            n //= i  # Divide n by i\n    return n  # The remaining n is the largest prime factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    Calculate the derivative of a polynomial represented by its coefficients.\n\n    Args:\n        xs (list): Coefficients of the polynomial, in ascending order of powers.\n\n    Returns:\n        list: Coefficients of the derivative polynomial, in ascending order of powers.\n    \"\"\"\n    return [i * x for i, x in enumerate(xs[1:], start=1)]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    s = s.lower()  # convert the string to lowercase\n    count = 0  # initialize a counter for vowels\n    for char in s:  # iterate over each character in the string\n        if char in 'aeiou':  # check if the character is a vowel\n            count += 1  # increment the counter if it is\n    if s.endswith('y'):  # check if the string ends with 'y'\n        count += 1  # increment the counter if it does\n    return count  # return the total count of vowels"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = str(x)\n    num_digits = len(digits)\n    shift = shift % num_digits  # handle shift > num_digits\n    return digits[-shift:] + digits[:-shift]"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, [x.split()[0] for x in s.split(\" and \")])\n    # Calculate the number of mangoes by subtracting apples and oranges from the total\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_nodes:\n        return []\n    return [min(even_nodes)[0], min(even_nodes)[1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num in sorted(freq, reverse=True):\n        if freq[num] >= num:\n            return num\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            result.append(max_val)\n            lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 <= total_chars2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            a //= i\n            i -= 1\n        if count == 3:\n            return True\n    return False"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    exponent = round(x ** (1. / n))\n    return exponent ** n == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Check if the length of a string is a prime number\"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Count of n-digit numbers that start with 1\n    start_with_one = 9 * (10 ** (n - 1))\n    \n    # Count of n-digit numbers that end with 1\n    end_with_one = 10 ** (n - 1)\n    \n    # Subtract the count of numbers that both start and end with 1\n    # to avoid double counting\n    both_start_and_end_with_one = 9 * (10 ** (n - 2)) if n > 1 else 0\n    \n    return start_with_one + end_with_one - both_start_and_end_with_one"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert the integer to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary string\n    digit_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(i for idx, i in enumerate(lst) if idx % 2 != 0 and i % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    coords = [(i, j) for i, row in enumerate(lst) for j, elem in enumerate(row) if elem == x]\n    coords.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coords"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return []\n    \n    first_last_sum = array[0] + array[-1]\n    sorted_array = array.copy()\n    \n    if first_last_sum % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    \n    return sorted_array"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 65 if char.isupper() else 97\n            encrypted_char = chr((ord(char) - ascii_offset + 2**2) % 26 + ascii_offset)\n            result += encrypted_char\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    lst.remove(smallest)\n    if len(lst) == 0 or min(lst) == smallest:\n        return None\n    return min(lst)"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    boredoms = [sentence for sentence in sentences if sentence and sentence.strip().startswith('I')]\n    return len(boredoms)"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in (x, y, z)):  # check if all numbers are integers\n        return False\n    return x == y + z or y == x + z or z == x + y"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 2) % 5]\n                if char.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n            else:\n                new_char = char.swapcase()\n            encoded_message += new_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:  # empty dictionary\n        return False\n    key_cases = [k.islower() for k in d if isinstance(k, str)]\n    if not all(isinstance(k, str) for k in d):  # non-string keys\n        return False\n    return all(key_cases) or all(not k for k in key_cases)"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and num < n:\n            primes.append(num)\n        num += 1\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper() and c in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return int(num + (1 if num > 0 else -1))\n    else:\n        return round(num)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        if pile[-1] % 2 == 0:  # if last level has even number of stones\n            pile.append(pile[-1] + 1)  # add next even number\n        else:  # if last level has odd number of stones\n            pile.append(pile[-1] + 2)  # add next odd number\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    if even_nums:\n        return max(even_nums)\n    return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m+1)) / (m - n + 1)\n    rounded_avg = round(avg)\n    return bin(rounded_avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    return sorted([i for i in x if has_even_digit(i)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    num_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", \n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    arr = sorted([x for x in arr if 1 <= x <= 9])\n    arr = arr[::-1]\n    return [num_names[x] for x in arr]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # i is odd\n            sum_i = sum(range(1, i+1))\n            result.append(sum_i)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digit_sum = sum(int(digit) for digit in str(abs(num)))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    \n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n            \n    return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_count1 = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count1 = len(lst1) - even_count1\n    even_count2 = sum(1 for num in lst2 if num % 2 == 0)\n    odd_count2 = len(lst2) - even_count2\n    \n    if odd_count1 <= even_count2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    words = test.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    max_freq = max(freq.values(), default=0)\n    return {k: v for k, v in freq.items() if v == max_freq}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # delete all the characters in s that are equal to any character in c\n    result = ''.join(i for i in s if i not in c)\n    \n    # check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    \n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        count = sum(c in '13579' for c in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, i, i))\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonants = sum(1 for char in word.lower() if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    open_count1 = lst[0].count('(')\n    close_count1 = lst[0].count(')')\n    open_count2 = lst[1].count('(')\n    close_count2 = lst[1].count(')')\n    \n    if open_count1 + open_count2 == close_count1 + close_count2:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if 10 <= i < 100)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    if not date:  # rule 1: date string is not empty\n        return False\n\n    parts = date.split('-')  # split the date string into month, day, year\n    if len(parts) != 3:  # date string should be in the format mm-dd-yyyy\n        return False\n\n    month, day, year = map(int, parts)  # convert month, day, year to integers\n\n    if month < 1 or month > 12:  # rule 3: months should not be less than 1 or higher than 12\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:  # rule 2: days for months 1,3,5,7,8,10,12\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:  # rule 2: days for months 4,6,9,11\n        if day < 1 or day > 30:\n            return False\n    else:  # rule 2: days for month 2\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for c in txt:\n            if c.islower() and ord(c) % 2 == 1:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return lst == sorted(set(lst), key=lst.index)"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of intersection of two intervals is a prime number.\"\"\"\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n    queue = deque([(grid[0][0], [(0, 0)])])  # initialize queue with starting cell\n    visited = set((0, 0))  # keep track of visited cells\n    min_path = None\n\n    while queue:\n        path_sum, path = queue.popleft()\n        if len(path) == k:\n            if min_path is None or path_sum < min_path[0]:\n                min_path = (path_sum, [grid[r][c] for r, c in path])\n            continue\n\n        for dr, dc in directions:\n            r, c = path[-1][0] + dr, path[-1][1] + dc\n            if 0 <= r < N and 0 <= c < N and (r, c) not in visited:\n                visited.add((r, c))\n                queue.append((path_sum + grid[r][c], path + [(r, c)]))\n\n    return min_path[1]"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    trib = [0]*(n+1)\n    trib[0] = 1\n    trib[1] = 3\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            trib[i] = 1 + i / 2\n        else:\n            trib[i] = trib[i-1] + trib[i-2] + trib[i-1]\n    return trib"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:  # even digit\n            return 0\n        product *= digit\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            if len(stack) > 1:\n                return True\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x) ** 2 for x in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # empty string\n        return False\n    words = txt.split()\n    last_word = words[-1]\n    if last_word[-1].isalpha() and len(last_word) == 1:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    \n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    \n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Convert strings to floats, replacing comma with period if necessary\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = float(a)\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        b = float(b)\n\n    # Compare values\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    for a in range(2, n//2 + 1, 2):\n        for b in range(a, n//2 + 1, 2):\n            for c in range(b, n//2 + 1, 2):\n                d = n - a - b - c\n                if d >= c and d % 2 == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace 3 or more consecutive underscores with a dash\n    while \"__\" in text:\n        text = text.replace(\"___\", \"-\")\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.rsplit('.', 1)\n\n    # Check if the substring before the dot is not empty and starts with a latin alphabet letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is one of the allowed extensions\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    # Check if there are not more than three digits in the file's name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted((x for x in nums), key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and num % 10 % 2 != 0 and (num // 10) % 10 % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])"}
{"task_id": "HumanEval/149", "solution": "def list_sort(lst):\n    lst = [s for s in lst if len(s) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(ext):\n        cap = sum(1 for c in ext if c.isupper())\n        sm = sum(1 for c in ext if c.islower())\n        return cap - sm\n\n    strongest_ext = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Returns True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    b_rotations = [b[i:] + b[:i] for i in range(len(b))]\n    return any(b_rot in a for b_rot in b_rotations)"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):  # convert to string to iterate over digits\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in ascending order\n    a, b, c = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return c**2 == a**2 + b**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = remaining - min(need, remaining)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    expression = \"\"\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    return eval(expression)"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    has_letter = False\n    for c in s:\n        if c.isalpha():  # if c is a letter\n            has_letter = True\n            result += c.swapcase()  # reverse case\n        else:\n            result += c  # keep non-letters as is\n    if not has_letter:  # if no letters, reverse the string\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode())\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    # Ensure a is the smaller number and b is the larger number\n    a, b = min(a, b), max(a, b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate from a to b (inclusive)\n    for i in range(a, b + 1):\n        # Check if the digit is even\n        if i % 2 == 0:\n            even_digits.append(i)\n    \n    # Return the list of even digits\n    return even_digits"}
