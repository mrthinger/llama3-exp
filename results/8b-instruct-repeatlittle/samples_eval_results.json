{"date": "2024-05-10 01:31", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\nimport math\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \n    Args:\n    numbers (List[float]): A list of floating point numbers\n    threshold (float): The minimum distance between two numbers to be considered close\n    \n    Returns:\n    bool: True if there are two numbers closer than the threshold, False otherwise\n    \"\"\"\n    numbers.sort()  # Sort the list of numbers first\n    for i in range(len(numbers) - 1):\n        # Check if the difference between the current number and the next number is less than the threshold\n        if abs(numbers[i + 1] - numbers[i]) < threshold:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            temp += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                temp += char\n                if not stack:\n                    result.append(temp)\n                    temp = ''\n            else:\n                return []\n    if stack:\n        return []\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["()()(()"]]}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    stack = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            stack.pop()\n            current_depth -= 1\n\n    for _ in range(len(stack)):\n        stack.pop()\n\n    while stack:\n        result.insert(0, max_depth)\n        max_depth -= 1\n        for _ in range(max_depth):\n            stack.pop()\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((()))"]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\"\"\"\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 2]]}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), -1, -1):\n        if string[:i][::-1] == string[:i]:\n            prefix = string[:i][::-1]\n            suffix = string[i:]\n            return prefix + suffix\n\n    return string[::-1] + string\n\nprint(make_palindrome(''))  # ''\nprint(make_palindrome('cat'))  # catac\nprint(make_palindrome('cata'))  # catac", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["xyz"]], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    return max(strings, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = [numbers[0]]\n    max_so_far = numbers[0]\n    for num in numbers[1:]:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    Args:\n        numbers (List[int]): A list of integers.\n    \n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of all integers in the list.\n    \"\"\"\n    \n    # Initialize sum and product to 0 and 1 respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Add the current number to the sum\n        total_sum += num\n        # Multiply the current number with the product\n        total_product *= num\n    \n    # Return the sum and product as a tuple\n    return total_sum, total_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n    result = ''\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result += '0'\n        elif a[i] == '0' and b[i] == '0':\n            result += '0'\n        else:\n            result += '1'\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = statistics.mean(numbers)\n    return statistics.mean(abs(x - mean) for x in numbers)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2.0, 1.0, 1.0, 2.0, 2.0, 2.0, -2.0]]]}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort()\n    return ' '.join([key for key, value in sorted(num_dict.items(), key=lambda item: item[1]) if value in numbers])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["two two three three four five six"]]}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0] * len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0.1, 0.5, 0.9, 0.3, 0.7]]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l):\n    return [x if i % 3 != 0 else sorted([y for y in l if i % 3 == 0])[0] for i, x in enumerate(l)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    string = string.lower()\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    return len(char_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\nimport math\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return tuple(sorted(closest_pair))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5 + 1)):\n        if num % i == 0:\n            return False\n    return True\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"Return list of prime factors of given integer in the order from smallest to largest.\"\"\"\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s)) for i in range((len(s) + 2) // 3)]\n    # decode each group by moving first character to the end.\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[78]], "plus_fail_tests": [[78]]}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == '|':\n            i += 1\n        if i < len(music_string):\n            note = music_string[i:i+2]\n            result.append(notes[note])\n            i += 2\n    return result\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    collisions = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                distance = abs(i - j)\n                if distance % 2 == 0:\n                    collisions += 1\n    return collisions // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l):\n    return [x if i % 2 != 0 else sorted([y for y in l if i % 2 == 0])[j] for i, x in enumerate(l) for j, y in enumerate(l) if i % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    if len(l) < 3:\n        return False\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib4_values = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib4_values.append(fib4_values[i-1] + fib4_values[i-2] + fib4_values[i-3] + fib4_values[i-4])\n        return fib4_values[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\nimport numpy as np\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    max_coeff_index = len(xs) // 2\n    max_coeff = abs(xs[max_coeff_index])\n    for i in range(-10, 11):\n        x = i / 10.0\n        if abs(poly(xs, x)) < max_coeff * 1e-6:\n            return x\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n    \n    Returns:\n        List[str]: The filtered list of strings.\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [i + 1 for i in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs):\n    return [i * x for i, x in zip([i for i in range(1, len(xs)), xs[1:]], xs)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l, t):\n    return all(i < t for i in l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(\"<\")\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_values = [0] * (n + 1)\n        fibfib_values[1] = 0\n        fibfib_values[2] = 1\n        for i in range(3, n + 1):\n            fibfib_values[i] = fibfib_values[i-1] + fibfib_values[i-2] + fibfib_values[i-3]\n        return fibfib_values[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = True\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    if len(s0) != len(s1):\n        return False\n    char_count0 = {}\n    char_count1 = {}\n    for char in s0:\n        if char in char_count0:\n            char_count0[char] += 1\n        else:\n            char_count0[char] = 1\n    for char in s1:\n        if char in char_count1:\n            char_count1[char] += 1\n        else:\n            char_count1[char] = 1\n    return char_count0 == char_count1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n\n    Args:\n    text (str): The input string to check\n\n    Returns:\n    bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    # Remove spaces and convert to lowercase\n    text = text.replace(\" \", \"\").lower()\n    # Compare the string with its reverse\n    return text == text[::-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["never odd or even"]]}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"This function counts the number of vowels in a given string.\n    Vowels are 'a', 'e', 'i', 'o', 'u', and 'y' only when it's at the end of the word.\n    \n    Parameters:\n    s (str): The input string.\n    \n    Returns:\n    int: The number of vowels in the string.\n    \"\"\"\n    \n    # Convert the string to lowercase for easy comparison\n    s = s.lower()\n    \n    # Initialize a counter for vowels\n    vowel_count = 0\n    \n    # Check if the last character is 'y'\n    if len(s) > 0 and s[-1] == 'y':\n        # If 'y' is at the end, decrement the length by 1\n        s = s[:-1]\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in 'aeiou':\n            # If it's a vowel, increment the counter\n            vowel_count += 1\n    \n    # Return the total count of vowels\n    return vowel_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["key"]], "plus_fail_tests": [["candy"]]}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1, l2):\n    return sorted(set(l1 & l2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = int(words[words.index('apples')-1].replace('apples', '').replace('and', '').replace(',', '').strip())\n    oranges = int(words[words.index('oranges')-1].replace('oranges', '').replace('and', '').replace(',', '').strip())\n    return n - apples - oranges", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    arr = [x for x in arr if x != 0]  # remove all zeros\n    if n % 2 == 0:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:][::-1]\n        changes = sum(abs(a - b) for a, b in zip(left, right))\n    else:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid + 1:][::-1]\n        changes = sum(abs(a - b) for a, b in zip(left, right))\n    return changes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l):\n    increasing = all(x <= y for x, y in zip(l, l[1:]))\n    decreasing = all(x >= y for x, y in zip(l, l[1:]))\n    return increasing or decreasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    root = round(a ** (1/3))\n    return root ** 3 == a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[-1]], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    digits = str(abs(x))\n    shift = shift % len(digits)\n    if shift == 0:\n        return digits\n    return digits[-shift:] + digits[:-shift]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[97, 8]], "plus_fail_tests": [[1234, 6]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        if sorted_lst:\n            result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"Only integers are allowed\")\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5 + 1)):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(list(set(l)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [node for node in arr if node % 2 == 0]\n    if not even_nodes:\n        return []\n    smallest_even = min(even_nodes)\n    return [smallest_even, arr.index(smallest_even)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n        return lst1\n    elif total1 > total2:\n        return lst2\n    else:\n        return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    max_num = -1\n    for num, freq in freq_dict.items():\n        if num > 0 and freq >= num:\n            max_num = max(max_num, num)\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) for j, val in reversed(list(zip(*[iter(row)]*\u221e))[::-1]) if val == x]\n    result.sort()\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    hex_to_decimal = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    decimal_to_prime = {2: True, 3: True, 5: True, 7: True, 11: True, 13: True}\n    count = 0\n    for char in num:\n        if char in hex_to_decimal:\n            if hex_to_decimal[char] in decimal_to_prime:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary = bin(N)[2:]\n    return '1' * sum(int(digit) for digit in binary)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences += S.split('! ')\n    sentences += S.split('? ')\n    boredoms = [sentence for sentence in sentences if sentence and sentence.split()[0].lower() == 'i']\n    return len(boredoms)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["I love It !"]], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return \"db\" + \"0\" * (8 - len(binary) % 8) + binary.zfill(8) + \"db\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    value = float(value)\n    if value == int(value):\n        return int(value)\n    else:\n        if value % 1 >= 0.5:\n            return int(value + 1)\n        else:\n            return int(value)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["-15.5"]], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                if char in 'abcdef':\n                    encoded_message += chr((ord(char) + 2 - 97) % 26 + 97)\n                else:\n                    encoded_message += chr(ord(char) + 2)\n            else:\n                if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                    if char in 'XYZ':\n                        encoded_message += chr((ord(char) - 2 - 64) % 26 + 64)\n                    else:\n                        encoded_message += chr(ord(char) - 2)\n                else:\n                    encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.upper() in 'AEIOU':\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["abcDEf"]]}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    if n <= 1:\n        return []\n    primes = []\n    for potential_prime in range(2, n):\n        is_prime = True\n        for possible_factor in range(2, int(len(str(potential_prime))**0.5 + 1)):\n            if potential_prime % possible_factor == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(potential_prime)\n    return primes", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return array\n\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n\n    return all_lower or all_upper", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    shift = 4\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m+1))\n    avg = round(total / (m - n + 1))\n    return format(avg, 'b')", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2]]}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    odd_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n    if odd_count > len(lst2):\n        return \"NO\"\n    else:\n        return \"YES\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4], [1, 5, 3, 4]]], "plus_fail_tests": [[[1, 3, 5, 7], [5, 7, 9, 11]]]}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    if not arr:\n        return []\n    arr = [i for i in arr if 1 <= abs(i) <= 9]\n    arr.sort()\n    arr = arr[::-1]\n    return [f\"{i}o\" if i % 10 == 1 else f\"{i}wo\" if i % 10 == 2 else f\"{i}ree\" if i % 10 == 3 else f\"{i}our\" if i % 10 == 4 else f\"{i}ive\" if i % 10 == 5 else f\"{i}ix\" if i % 10 == 6 else f\"{i}even\" if i % 10 == 8 else \"nine\" for i in arr]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    max_element = max(arr)\n    if arr.index(max_element) != 0:\n        return False\n\n    for i in range(1, len(arr)):\n        if arr[i-1] > arr[i]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 6, 7, 8, 1, 2, 3, 4]]]}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return [word.strip() for word in s.replace(\" \", \",\").split(\",\")]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(c) % 2 != 0 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{str(i+1)}ng {str(i+1)} of the {str(i+1)}nput.\")\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x % 2 == 0:\n        return x\n    elif y % 2 == 0:\n        return y\n    else:\n        return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    result = [char for char in s if char not in c]\n    return (''.join(result), result == result[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in vowels:\n            if i > 0 and word[i-1] not in vowels and word[i-1] not in '0123456789':\n                return word[i]\n    return ''", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    try:\n        month, day, year = date.split('-')\n        if not month or not day or not year:\n            return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1:\n            return False\n        if (int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31) or \\\n           (int(month) in [4, 6, 9, 11] and int(day) > 30) or \\\n           (int(month) == 2 and int(day) > 29):\n            return False\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["06-04-202"]]}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    stack = []\n    for char in lst[0] + lst[1][::-1]:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[")())", "(()()("]]], "plus_fail_tests": [[["()()", "()()()"]]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), -x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return total_water // capacity + (total_water % capacity > 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    window_sum = 0\n    left = 0\n\n    for right in range(len(nums)):\n        window_sum += nums[right]\n\n        while window_sum > min_sum:\n            window_sum -= nums[left]\n            left += 1\n\n        if window_sum < min_sum:\n            min_sum = window_sum\n\n    return min_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "import heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num)) <= 2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "from collections import deque\nfrom heapq import heappop, heappush\n\ndef minPath(grid, k):\n    N = len(grid)\n    visited = [[False] * N for _ in range(N)]\n    min_path = []\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                queue = [(grid[i][j], [(i, j)])\n                         for _ in range(N * N)]\n                visited[i][j] = True\n                while queue:\n                    val, path = heappop(queue)\n                    if len(path) == k:\n                        if not min_path or path < min_path:\n                            min_path = path\n                    else:\n                        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                            x, y = i + dx, j + dy\n                            if 0 <= x < N and 0 <= y < N and not visited[x][y]:\n                                visited[x][y] = True\n                                heappush(queue, (grid[x][y], path + [(x, y)])\n                                            )\n    return min_path", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    result = []\n    i = 1\n    while len(result) < n:\n        if i % 2 == 0:\n            result.append(i)\n        else:\n            result.append(i + 1)\n        i += 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        words = txt.replace(',', ' ').split()\n    if not words:\n        return sum(1 for i in range(26) if txt[i].islower() and (i+1) % 2 != 0)\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello,world!"]], "plus_fail_tests": []}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        signs *= 1 if num > 0 else -1\n        magnitude_sum += abs(num)\n    return signs * magnitude_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] >= lst[i+1]:\n            if lst.count(lst[i]) > 1:\n                return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 2, 4, 5]]], "plus_fail_tests": [[[8, 7, 6, 5, 4, 3, 2, 1]]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        half = modp(n // 2, p)\n        return (half * half) % p\n    else:\n        return (2 ** n) % p", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 1]]}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5 + 1)):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x < n:\n        return False\n    power = 0\n    while pow(n, power) <= x:\n        if pow(n, power) == x:\n            return True\n        power += 1\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[82, 1]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2468]], "plus_fail_tests": [[246]]}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) > 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    for i in range(2, n+1, 2):\n        for j in range(2, n-i+1, 2):\n            for k in range(2, (n-i-j+1)//2, 2):\n                for m in range(2, (n-i-j-k+1)//2, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10:\n            first_digit = int(str(abs(num))[0])\n            last_digit = int(str(abs(num))[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, -73, 14, -15]]], "plus_fail_tests": []}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if txt.rstrip().endswith(' '):\n        return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] <= arr[i+1]:\n            return i\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5]]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += abs(num) ** 3\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    result = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == ' ':\n            if len(result) > 0 and result[-1] == ' ':\n                if i < len(text) - 1 and text[i+1] == ' ':\n                    result += '-'\n                else:\n                    result += '_'\n            else:\n                result += '_'\n        else:\n            result += text[i]\n        i += 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Exa   mple"]], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    if not isinstance(file_name, str):\n        return 'No'\n\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    name, extension = parts\n    if not name[0].isalpha():\n        return 'No'\n    if not extension in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n\n    return 'Yes'", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[".txt"]], "plus_fail_tests": [[".exe"]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return [x for _, x in sorted((sum(int(digit) for digit in str(abs(i))), i) for i in nums)]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, roman in roman_numerals.items():\n        while number >= value:\n            result += roman\n            number -= value\n    return result.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i**2 for i in filter(lambda x: type(x) == int and x >= 0, map(abs, lst)) if i % 2 != 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 8]]], "plus_fail_tests": [[[-5, 7, 9]]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if negatives and positives:\n        return (max(negatives), min(positives))\n    elif negatives:\n        return (max(negatives), None)\n    elif positives:\n        return (None, min(positives))\n    else:\n        return (None, None)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    if not words:\n        return \"\"\n    max_word = max(words, key=lambda word: (len(set(word)), -words.index(word)))\n    return max_word", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["name", "enam", "game"]]], "plus_fail_tests": [[["xyz", "pqr"]]]}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    common_divisor = gcd(x_den, n_den)\n    x_num //= common_divisor\n    n_num //= common_divisor\n\n    return x_num * n_den == n_num * x_den", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\").replace(\".\", \"\"))\n        b = float(b.replace(\",\", \".\"))\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    elif isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list is not equal to the length of operand list minus one.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has less than two operands.\")\n    if not all(isinstance(x, int) and x >= 0 for x in operand):\n        raise ValueError(\"Operand list contains non-integer or negative numbers.\")\n    if not all(op in ['+', '-', '*', '//', '**'] for op in operator):\n        raise ValueError(\"Operator list contains invalid operators.\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if a[i:] + a[:i) == b:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    return [abs(a-b) for a,b in zip(game,guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining -= total_eaten - number\n    return [total_eaten, remaining]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1 = planets.index(planet1)\n    i2 = planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return tuple(planets[i1+1:i2])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5 + 1)):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import md5\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return md5.md5(text.encode()).hexdigest()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["aaaa", "bbbb", "dd", "cc"]]], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b+1):\n        if int(str(i)[-1]) % 2 == 0:\n            result.append(i)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    if not any(char.isalpha() for char in s):\n        result = result[::-1]\n    return ''.join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    if n < 1:\n        return \"Input should be a positive integer\"\n    else:\n        count = 0\n        for i in range(10**(n-1), 10**n):\n            if str(i)[0] == '1' or str(i)[-1] == '1':\n                count += 1\n        return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    i = 2\n    while len(factors) < 3:\n        if a % i == 0:\n            factors.append(i)\n            a //= i\n        else:\n            i += 1\n    return all(is_prime(f) for f in factors)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [1, 3]\n    else:\n        sequence = [1, 3]\n        while len(sequence) < n + 1:\n            if len(sequence) % 2 == 0:\n                next_num = 1 + len(sequence) / 2\n            else:\n                prev2 = sequence[-2]\n                prev1 = sequence[-1]\n                next_num = prev2 + prev1 + sequence[0]\n            sequence.append(next_num)\n        return sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if is_prime(num):\n                if num > max_prime:\n                    max_prime = num\n\n    if max_prime > 0:\n        return sum(int(digit) for digit in str(max_prime))\n    else:\n        return 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i**2 - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}