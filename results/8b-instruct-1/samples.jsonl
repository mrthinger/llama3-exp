{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than given threshold.\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n        threshold (float): The maximum allowed difference between two numbers.\n\n    Returns:\n        bool: True if any two numbers are closer than the threshold, False otherwise.\n    \"\"\"\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize the minimum difference to a large value\n    min_diff = float('inf')\n    \n    # Iterate over the sorted list of numbers\n    for i in range(1, len(numbers)):\n        # Calculate the difference between the current number and the previous number\n        diff = numbers[i] - numbers[i-1]\n        \n        # If the difference is less than the threshold, update the minimum difference\n        if diff < threshold:\n            min_diff = diff\n        # If the difference is less than or equal to the minimum difference, return True\n        elif diff <= min_diff:\n            return True\n    \n    # If no two numbers are closer than the threshold, return False\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    This function separates a string containing multiple groups of nested parentheses into separate strings.\n    \n    Args:\n    paren_string (str): A string containing multiple groups of nested parentheses.\n    \n    Returns:\n    List[str]: A list of strings, each containing a separate group of balanced parentheses.\n    \"\"\"\n    \n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    # Initialize an empty list to store the separated groups\n    separated_groups = []\n    \n    # Initialize an empty string to build the current group\n    current_group = \"\"\n    \n    # Iterate over each character in the input string\n    for char in paren_string:\n        # If the character is an open parenthesis, add it to the current group\n        if char == \"(\":\n            current_group += char\n        # If the character is a close parenthesis, add it to the current group\n        elif char == \")\":\n            current_group += char\n            # If the current group is not empty, add it to the list of separated groups\n            if current_group:\n                separated_groups.append(current_group)\n                current_group = \"\"\n    \n    # Return the list of separated groups\n    return separated_groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into \n    and integer part (largest integer smaller than given number) and decimals \n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \n    Parameters:\n    number (float): A positive floating point number.\n    \n    Returns:\n    float: The decimal part of the number.\n    \"\"\"\n    \n    # Convert the number to a string to easily extract the integer and decimal parts\n    str_number = str(number)\n    \n    # Find the index of the decimal point\n    decimal_point_index = str_number.find('.')\n    \n    # If the number is an integer, return 0.0\n    if decimal_point_index == -1:\n        return 0.0\n    \n    # Extract the decimal part\n    decimal_part = str_number[decimal_point_index + 1:]\n    \n    # Convert the decimal part back to a float and return it\n    return float(decimal_part)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function takes a list of deposit and withdrawal operations on a bank account that starts with zero balance.\n    It returns True if at any point the balance of account falls below zero, and False otherwise.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n    \"\"\"\n    \n    # Initialize the balance to zero\n    balance = 0\n    \n    # Iterate over each operation in the list\n    for operation in operations:\n        # Add the operation to the balance\n        balance += operation\n        \n        # If the balance falls below zero, return True\n        if balance < 0:\n            return True\n    \n    # If the function hasn't returned True by now, the balance never fell below zero, so return False\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation around the mean of a given list of numbers.\n\n    Args:\n    numbers (List[float]): A list of floating point numbers.\n\n    Returns:\n    float: The Mean Absolute Deviation of the input list.\n    \"\"\"\n    \n    # Calculate the mean of the input list\n    mean = sum(numbers) / len(numbers)\n    \n    # Initialize the sum of absolute deviations to 0\n    sum_of_abs_deviations = 0\n    \n    # Iterate over each number in the input list\n    for num in numbers:\n        # Calculate the absolute deviation from the mean\n        abs_deviation = abs(num - mean)\n        # Add the absolute deviation to the sum\n        sum_of_abs_deviations += abs_deviation\n    \n    # Calculate the Mean Absolute Deviation by dividing the sum by the length\n    mad = sum_of_abs_deviations / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.extend([delimeter, num])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    This function takes a string of nested parentheses as input, \n    and returns a list of integers representing the deepest level of nesting for each group.\n\n    Args:\n    paren_string (str): A string of nested parentheses separated by spaces.\n\n    Returns:\n    List[int]: A list of integers representing the deepest level of nesting for each group.\n    \"\"\"\n    \n    result = []  # Initialize an empty list to store the results\n    stack = []  # Initialize an empty stack to keep track of the nesting level\n    max_level = 0  # Initialize the maximum nesting level to 0\n    \n    for char in paren_string.split():  # Iterate over each group of parentheses\n        level = 0  # Initialize the current nesting level to 0\n        for paren in char:  # Iterate over each parenthesis in the group\n            if paren == '(':  # If it's an opening parenthesis, increment the level\n                stack.append(paren)\n                level += 1\n            elif paren == ')':  # If it's a closing parenthesis, decrement the level\n                stack.pop()\n                level -= 1\n            max_level = max(max_level, level)  # Update the maximum nesting level\n        result.append(max_level)  # Append the maximum nesting level for the current group\n        max_level = 0  # Reset the maximum nesting level for the next group\n        stack = []  # Reset the stack for the next group\n    \n    return result"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the input list.\n    \"\"\"\n    \n    # Initialize sum and product to 0 and 1 respectively\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for num in numbers:\n        # Add the number to the sum\n        total_sum += num\n        # Multiply the number to the product\n        total_product *= num\n    \n    # Return the sum and product as a tuple\n    return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(max(result[-1], num))\n    return result"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    # Find the longest postfix of supplied string that is a palindrome\n    for i in range(len(string), -1, -1):\n        postfix = string[i:]\n        if is_palindrome(postfix):\n            break\n\n    # Append to the end of the string reverse of a string prefix that comes before the palindromic suffix\n    prefix = string[:i]\n    return prefix + postfix[::-1]"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Check if the input strings have the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Iterate over the characters in the input strings\n    for char_a, char_b in zip(a, b):\n        # Perform binary XOR on the current characters\n        xor_result = str(int(char_a) ^ int(char_b))\n        # Append the result to the output string\n        result += xor_result\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    This function calculates the greatest common divisor (GCD) of two integers a and b.\n    \n    The GCD is the largest positive integer that divides both a and b without leaving a remainder.\n    \n    The function uses the Euclidean algorithm, which is an efficient method for computing the GCD of two numbers.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The greatest common divisor of a and b.\n    \"\"\"\n    \n    # Ensure that a is the larger number\n    if b > a:\n        a, b = b, a\n    \n    # If b is 0, the GCD is a\n    while b != 0:\n        a, b = b, a % b\n    \n    # The GCD is the remaining value of a\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_list = music_string.split()\n    beats = []\n    for note in music_list:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    This function takes a string of space-delimited numbers from 'zero' to 'nine' \n    and returns the string with numbers sorted from smallest to largest.\n\n    Args:\n        numbers (str): A string of space-delimited numbers from 'zero' to 'nine'.\n\n    Returns:\n        str: The input string with numbers sorted from smallest to largest.\n    \"\"\"\n    \n    # Split the input string into a list of numbers\n    num_list: List[str] = numbers.split()\n    \n    # Define a dictionary to map number names to their integer values\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    \n    # Use a list comprehension to convert the list of numbers to a list of integers\n    num_list = [num_dict[num] for num in num_list]\n    \n    # Sort the list of integers\n    num_list.sort()\n    \n    # Convert the sorted list of integers back to a list of number names\n    num_list = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in num_list]\n    \n    # Join the sorted list of number names into a string with spaces in between\n    sorted_numbers: str = ' '.join(num_list)\n    \n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (List[float]): A list of floating point numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple of two numbers that are the closest to each other.\n    \"\"\"\n    \n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize the minimum difference and the closest pair of numbers\n    min_diff = float('inf')\n    closest_pair = ()\n    \n    # Iterate over the sorted list of numbers\n    for i in range(len(numbers) - 1):\n        # Calculate the difference between the current number and the next number\n        diff = numbers[i + 1] - numbers[i]\n        \n        # If the difference is smaller than the minimum difference, update the minimum difference and the closest pair\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    # Return the closest pair of numbers\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    # Check if the list has at least two elements\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    \n    # Apply the linear transform\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"For a given number n, find the largest number that divides n evenly, smaller than n\"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2  # start from 2, the smallest prime number\n    factors = []  # initialize an empty list to store the factors\n    while i * i <= n:  # while i is less than or equal to the square root of n\n        if n % i:  # if n is not divisible by i\n            i += 1  # increment i by 1\n        else:  # if n is divisible by i\n            n //= i  # divide n by i\n            factors.append(i)  # add i to the list of factors\n    if n > 1:  # if n is greater than 1, it means n is a prime number\n        factors.append(n)  # add n to the list of factors\n    return factors  # return the list of factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    Args:\n        strings (List[str]): The input list of strings.\n        prefix (str): The prefix to filter by.\n    \n    Returns:\n        List[str]: The filtered list of strings.\n    \"\"\"\n    \n    # Use a list comprehension to filter the input list\n    # The condition for filtering is if the string starts with the given prefix\n    filtered_strings = [string for string in strings if string.startswith(prefix)]\n    \n    # Return the filtered list\n    return filtered_strings"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:  # 1 and numbers less than 1 are not prime\n        return False\n    elif n <= 3:  # 2 and 3 are prime\n        return True\n    elif n % 2 == 0 or n % 3 == 0:  # if the number is divisible by 2 or 3, it's not prime\n        return False\n    i = 5\n    while i * i <= n:  # only need to check up to the square root of n\n        if n % i == 0 or n % (i + 2) == 0:  # check if the number is divisible by i or i+2\n            return False\n        i += 6  # increment by 6 to check the next two numbers\n    return True"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([x for x in l if i % 3 == 0])[0] for i, x in enumerate(l)]"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += str_i.count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    return [x if i % 2 != 0 else y for i, x in enumerate(l)]"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode each group. If group has fewer elements than 3, add 'x' to the end.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group + 'x' for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th number that is a Fibonacci number and it's also prime.\"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    :param l: A list of integers\n    :return: A boolean indicating whether there are three distinct elements in the list that sum to zero\n    \"\"\"\n    # Create a set to store the elements we have seen so far\n    seen = set()\n    # Create a set to store the elements that sum to zero\n    zero_sum = set()\n    \n    # Iterate over the list\n    for num in l:\n        # Calculate the complement of the current number\n        complement = -num\n        # Check if the complement is in the seen set\n        if complement in seen:\n            # If the complement is in the seen set, add the current number and the complement to the zero_sum set\n            zero_sum.add((complement, num))\n        # Add the current number to the seen set\n        seen.add(num)\n    \n    # Check if there are three distinct elements in the list that sum to zero\n    return len(zero_sum) >= 3"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    # Initialize the count of collisions\n    collisions = 0\n    \n    # Initialize the lists to store the positions of the cars\n    left_to_right = [i for i in range(n)]\n    right_to_left = [i for i in range(n-1, -n, -1)]\n    \n    # Sort the lists\n    left_to_right.sort()\n    right_to_left.sort()\n    \n    # Initialize the pointers for the two lists\n    left = 0\n    right = 0\n    \n    # Loop through the lists\n    while left < n and right >= -n:\n        # If the cars at the current positions collide\n        if left_to_right[left] >= right_to_left[right]:\n            # Move the right pointer\n            right -= 1\n        else:\n            # Move the left pointer\n            left += 1\n            # Increment the count of collisions\n            collisions += 1\n    \n    # Return the count of collisions\n    return collisions"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    # Create an empty set to store the elements we have seen so far\n    seen = set()\n    # Iterate over the list\n    for num in l:\n        # For each number, calculate its complement (the number that would sum to zero)\n        complement = -num\n        # Check if the complement is in the set\n        if complement in seen:\n            # If it is, return True\n            return True\n        # If not, add the number to the set\n        seen.add(num)\n    # If we have iterated over the entire list and not found a pair that sums to zero, return False\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    \"\"\"\n    Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    Parameters:\n    x (int): The number to be converted.\n    base (int): The base to which the number should be converted.\n    \n    Returns:\n    str: The string representation of the number in the new base.\n    \"\"\"\n    \n    # Convert the number to the new base\n    convert_string = \"0123456789\"\n    result = \"\"\n    \n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = convert_string[remainder] + result\n    \n    # If the result is empty, return '0'\n    if result == \"\":\n        result = '0'\n    \n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a+b+c\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n\n    Args:\n    text (str): The input string to check\n\n    Returns:\n    bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    # Remove all non-alphanumeric characters and convert to lowercase\n    text = ''.join(e for e in text if e.isalnum()).lower()\n    \n    # Compare the string with its reverse\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    This function takes a string as input and returns a new string with all vowels removed.\n    \n    Parameters:\n    text (str): The input string.\n    \n    Returns:\n    str: The input string with all vowels removed.\n    \"\"\"\n    \n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Iterate over each character in the input string\n    for char in text:\n        # Check if the character is not a vowel\n        if char.lower() not in 'aeiou':\n            # If the character is not a vowel, add it to the result string\n            result += char\n    \n    # Return the result string\n    return result"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    return all(x < t for x in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    Parameters:\n    n (int): The input number.\n    \n    Returns:\n    int: The largest prime factor of n.\n    \"\"\"\n    # Start from the largest possible factor (n/2) and go down to 2\n    for i in range(n // 2, 1, -1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is a prime number\n            is_prime = True\n            for j in range(2, int(i ** 0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            # If i is a prime number, return it as the largest prime factor\n            if is_prime:\n                return i\n    # If no prime factor is found, return 2 (the smallest prime number)\n    return 2"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], 1)]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"\n    This function takes a string representing a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the end of the given word.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of vowels in the string.\n    \"\"\"\n    # Convert the string to lowercase to make the function case-insensitive\n    s = s.lower()\n    \n    # Initialize a counter for the number of vowels\n    vowel_count = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is a vowel\n        if char in 'aeiou':\n            # If the character is a vowel, increment the counter\n            vowel_count += 1\n        # Check if the character is 'y' and it's not at the beginning of the string\n        elif char == 'y' and s.index(char) != 0:\n            # If the character is 'y' and it's not at the beginning of the string, increment the counter\n            vowel_count += 1\n    \n    # Return the total count of vowels\n    return vowel_count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Parameters:\n    x (int): The integer to be shifted.\n    shift (int): The number of positions to shift the digits.\n    \n    Returns:\n    str: The shifted integer as a string.\n    \"\"\"\n    \n    # Convert the integer to a string\n    str_x = str(x)\n    \n    # Calculate the actual shift, considering the number of digits\n    actual_shift = shift % len(str_x)\n    \n    # Split the string into two parts at the shift position\n    part1 = str_x[:-actual_shift]\n    part2 = str_x[-actual_shift:]\n    \n    # Concatenate the parts in reverse order to get the shifted string\n    shifted_str = part2 + part1\n    \n    return shifted_str"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    words = s.split()\n    apples = int(''.join(filter(str.isdigit, [word for word in words if word.isdigit()])))\n    oranges = int(''.join(filter(str.isdigit, [word for word in words if word.endswith('s') and word not in ['mango', 'apples', 'oranges']])))\n\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [(node, i) for i, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    return [min(node for node, _ in even_nodes), even_nodes[0][1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    for num in sorted(freq.keys(), reverse=True):\n        if num > 0 and freq[num] >= num:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    \n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter of the triangle\n        s = (a + b + c) / 2\n        \n        # Calculate the area of the triangle using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        \n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    arr = arr + arr[::-1][1:]\n    count = 0\n    for i in range(n):\n        if arr[i] != arr[n+i]:\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        factors.append(n)\n    if len(factors) != 3:\n        return False\n    factors.sort()\n    return all(is_prime(f) for f in factors)"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    import math\n    root = math.pow(n, 1.0 / math.log(x, n))\n    return int(root + 0.5) ** math.log(n, 10) == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    c = int(a ** (1. / 3))\n    return c ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in hex_primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"task_id": "HumanEval/82", "solution": "def prime_length(string):\n    length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the total number of n-digit positive integers\n    total_numbers = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit positive integers that start with 1\n    start_with_one = 10 ** (n - 1)\n    \n    # Calculate the number of n-digit positive integers that end with 1\n    end_with_one = int(str(10 ** n - 1)[-1]) * (10 ** (n - 1))\n    \n    # The total count is the sum of the numbers that start with 1 and end with 1\n    count = start_with_one + end_with_one\n    \n    return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary = bin(N)[2:]  # Convert N to binary and remove the '0b' prefix\n    return sum(int(digit) for digit in binary)  # Calculate the sum of digits"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    result = []\n    for word in words:\n        result.append(''.join(sorted(word)))\n    return ' '.join(result)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        if x in row:\n            result.append((i, row.index(x)))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    if not array:\n        return array\n\n    if sum(array[0], array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    This function returns the 2nd smallest element of the list.\n    If the list has less than 2 elements, it returns None.\n    \n    Parameters:\n    lst (list): A list of integers.\n    \n    Returns:\n    int or None: The 2nd smallest element of the list or None if the list has less than 2 elements.\n    \"\"\"\n    \n    # Remove duplicates by converting the list to a set\n    unique_lst = set(lst)\n    \n    # If the list has less than 2 elements, return None\n    if len(unique_lst) < 2:\n        return None\n    \n    # Sort the list in ascending order\n    sorted_lst = sorted(unique_lst)\n    \n    # Return the 2nd smallest element\n    return sorted_lst[1]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('. ')\n    sentences += S.split('? ') if '?' in S else []\n    sentences += S.split('! ') if '!' in S else []\n    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return (x == y + z) or (x == z + y) or (y == x + z) or (y == z + x) or (z == x + y) or (z == y + x)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n    all_lower = all(isinstance(key, str) and key.islower() for key in dict)\n    all_upper = all(isinstance(key, str) and key.isupper() for key in dict)\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n        if len(primes) == n - 1:\n            break\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return (a % 10) * (b % 10)"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.upper() in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    value = float(value)\n    if value == int(value):\n        return int(value)\n    elif value > int(value):\n        return int(value) + 1\n    else:\n        return int(value)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    for i in range(n-1):\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 1)\n        else:\n            pile.append(pile[-1] - 1)\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    if even_nums:\n        return max(even_nums)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort()\n    arr = arr[::-1]\n    return [str(i) for i in arr]"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nimport math\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * math.factorial(n-1)"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if num >= 0:\n            if sum(int(digit) for digit in str(num)) > 0:\n                count += 1\n        else:\n            if sum(int(digit) for digit in str(abs(num))) > 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    odd_count = len(lst1) - even_count\n    \n    if odd_count > len(lst2):\n        return \"NO\"\n    \n    for num in lst1:\n        if num % 2 != 0:\n            if not any(num in lst2 for lst2_num in lst2):\n                return \"NO\"\n            lst2.remove(num)\n    \n    return \"YES\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n\n    test = test.split()\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    max_count = max(letter_count.values())\n    max_letters = [letter for letter, count in letter_count.items() if count == max_count]\n\n    return {letter: max_count for letter in max_letters}"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s,c):\n    s = ''.join([i for i in s if i not in c])\n    return (s, s == s[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(int(d) % 2 for d in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{i}ng {i} of the {i}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'AEIOUaeiou'\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i-1].lower() not in vowels and word[i+1].lower() not in vowels:\n                return word[i]\n    return ''"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return 'No'\n                stack.pop()\n    return 'Yes' if not stack else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(i for i in lst if i % 2 != 0 and lst.index(i) % 2 == 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3*n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        words = txt.split(',')\n    if not words:\n        return sum(1 for c in txt if ord(c) % 2 == 1 and 'a' <= c <= 'z')\n    return words"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    if len(lst) <= 1:\n        return True\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return len(set(lst)) == len(lst)"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    product = 1\n    for sign in signs:\n        product *= sign\n    return sum(abs(x) for x in arr) * product"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 2]\n    else:\n        sequence = [3, 2]\n        for i in range(2, n):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])\n        return sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return bool(stack)"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:  # if the string is empty, return False\n        return False\n    last_char = txt[-1]  # get the last character of the string\n    if not txt[:-1].strip().isalnum():  # if the last character is not part of a word\n        return last_char.isalpha()  # return True if it's an alphabetical character\n    return False  # otherwise, return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            return i-1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    \n    if negative:\n        largest_negative = max(negative)\n    else:\n        largest_negative = None\n\n    if positive:\n        smallest_positive = min(positive)\n    else:\n        smallest_positive = None\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(\",\", \".\").replace(\".\", \"\"))\n        b = float(b.replace(\",\", \".\").replace(\".\", \"\"))\n    elif isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    elif isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for m in range(2, n, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n < 1:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"--\" in text or \"---\" in text or \"----\" in text:\n        text = text.replace(\"--\", \"-\")\n        text = text.replace(\"---\", \"-\")\n        text = text.replace(\"----\", \"-\")\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    if not file_name:\n        return 'No'\n\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n\n    prefix, suffix = parts\n    if not prefix[0].isalpha() or not prefix.isalnum():\n        return 'No'\n    if not suffix in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in prefix) > 3:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += num ** 3\n    return total"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    common_divisor = max(x_den, n_den)\n    while common_divisor > 1:\n        if x_den % common_divisor == 0 and n_den % common_divisor == 0:\n            x_num //= common_divisor\n            x_den //= common_divisor\n            n_num //= common_divisor\n            n_den //= common_divisor\n        common_divisor -= 1\n    \n    return x_num * n_num == x_den * n_den"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted((sum(int(digit) for digit in str(num)), i, num) for i, num in enumerate(nums))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] % 2 != 0 and str(num)[-1] % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/32", "solution": "import math\nimport numpy as np\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if max([abs(i) for i in xs]) == 0:\n        raise ValueError(\"xs must have largest non zero coefficient\")\n    return np.roots(np.poly1d(xs))[0].real"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    visited = [[False]*N for _ in range(N)]\n    res = []\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            nonlocal res\n            res = path\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N and not visited[x][y]:\n                visited[x][y] = True\n                dfs(x, y, path + [grid[x][y]])\n                visited[x][y] = False\n\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n\n    return res"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x % 2 != 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b in a[i:] + a[:i]:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the roman numerals and their corresponding integer values\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate over the roman numerals in descending order of their values\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        # Calculate the number of times the current roman numeral can be subtracted from the number\n        count = number // value\n        # Subtract the value of the roman numeral from the number\n        number -= count * value\n        # Add the roman numeral to the result string the calculated number of times\n        result += numeral * count\n\n    # Return the result string in lowercase\n    return result.lower()"}
{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    This function checks if the three sides of a triangle form a right-angled triangle.\n    \n    Parameters:\n    a (int): The length of the first side of the triangle.\n    b (int): The length of the second side of the triangle.\n    c (int): The length of the third side of the triangle.\n    \n    Returns:\n    bool: True if the three sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    \n    # Calculate the squares of the sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n    \n    # Check if the sum of the squares of the two smaller sides is equal to the square of the largest side\n    if (a_squared + b_squared == c_squared) or (a_squared + c_squared == b_squared) or (b_squared + c_squared == a_squared):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    remaining -= total_eaten - number\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list is not equal to the length of operand list minus one.\")\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has less than two operands.\")\n    if not all(isinstance(x, int) and x >= 0 for x in operand):\n        raise ValueError(\"Operand list has non-negative integers.\")\n    if not all(x in ['+', '-', '*', '//', '**'] for x in operator):\n        raise ValueError(\"Operator list has invalid operators.\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            result += char.swapcase()\n        else:\n            result += char\n    return result[::-1] if not result.isalpha() else result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if int(str(i)[0]) % 2 == 0 and int(str(i)[1:]) % 2 == 0]"}
