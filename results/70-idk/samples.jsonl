{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers: A list of float numbers\n        threshold: The minimum distance between two numbers\n\n    Returns:\n        True if there are two numbers closer than the threshold, False otherwise\n    \"\"\"\n    numbers = sorted(numbers)  # Sort the list of numbers\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate groups of balanced parentheses into separate strings.\n\n    Args:\n        paren_string: A string containing multiple groups of balanced parentheses.\n\n    Returns:\n        A list of strings, where each string is a separate group of balanced parentheses.\n\n    Example:\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n    \"\"\"\n    result = []\n    current_group = \"\"\n    stack = []\n    for char in paren_string.replace(\" \", \"\"):\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack.pop() != \"(\":\n                raise ValueError(\"Unbalanced parentheses\")\n            current_group += char\n            if not stack:\n                result.append(current_group)\n                current_group = \"\"\n    if stack:\n        raise ValueError(\"Unbalanced parentheses\")\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean_val = statistics.mean(numbers)\n    \n    # Initialize the sum of absolute deviations\n    sum_dev = 0.0\n    \n    # Iterate over the input numbers\n    for num in numbers:\n        # Calculate the absolute deviation from the mean\n        dev = abs(num - mean_val)\n        # Add it to the sum\n        sum_dev += dev\n    \n    # Calculate the Mean Absolute Deviation (MAD)\n    mad = sum_dev / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups of nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n\n    Args:\n        paren_string (str): A string of multiple groups of nested parentheses separated by spaces.\n\n    Returns:\n        List[int]: A list of integers where each integer represents the maximum level of nesting for each group.\n    \"\"\"\n    max_levels = []\n    for group in paren_string.split():\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                current_level -= 1\n        max_levels.append(max_level)\n    return max_levels"}
{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    else:\n        total_sum = sum(numbers)\n        total_product = reduce(mul, numbers, 1)\n        return total_sum, total_product"}
{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_initial)\n    return result"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if not string:\n        return ''\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string) - i][::-1]\n\n    raise ValueError(\"Invalid input string\")"}
{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, bin_str_b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    result = \"\"\n    for i in range(max(len(a), len(bin_str_b))):\n        # Use zip_longest to handle strings of different lengths\n        # Fillvalue='0' pads the shorter string with leading zeros\n        for a_char, b_char in [(a[y] if y < len(a) else '0', bin_str_b[y] if y < len(bin_str_b) else '0') \n                               for y in [i]] :\n            if a_char == b_char:\n                result += '0'\n            else:\n                result += '1'\n    return result\n trough_max = max(map(len, (a, bin_str_b)))\n result = ''.join('1' if a_as_int ^ int(b_as_int) else '0' \n                  for a_as_int, \n                  b_as_int in zip_longest(map(int, a.zfill(through_max)), \n                  map(int, bin_str_b.zfill(through_max)), fillvalue=0))\n return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i+1] for i in range(len(string))]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(c.casefold() for c in string))"}
{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a music string in special ASCII format and return a list of integers\n    representing the number of beats each note lasts.\n\n    :param music_string: A string of musical notes in special ASCII format\n    :return: A list of integers representing the number of beats each note lasts\n    \"\"\"\n    note_legends = {\n        'o': 4,  # whole note, lasts four beats\n        'o|': 2,  # half note, lasts two beats\n        '.|': 1  # quarter note, lasts one beat\n    }\n    notes = music_string.split()\n    return [note_legends.get(note, 0) for note in notes]"}
{"task_id": "HumanEval/18", "solution": "def how_many_count(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"task_id": "HumanEval/19", "solution": "from typing import List, Dict\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Create a dictionary to map number words to their integer values\n    num_map: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Split the input string into a list of number words\n    num_words: List[str] = numbers.split()\n\n    # Sort the list of number words based on their corresponding integer values\n    sorted_num_words: List[str] = sorted(num_words, key=lambda x: num_map[x])\n\n    # Join the sorted list of number words back into a string\n    sorted_numbers: str = ' '.join(sorted_num_words)\n\n    return sorted_numbers"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other\n    and return them in order (smaller number, larger number).\n    \"\"\"\n    # Generate all possible pairs of numbers\n    pairs = list(itertools.combinations(sorted(numbers), 2))\n    \n    # Initialize the minimum distance and the closest pair\n    min_dist = float('inf')\n    closest_pair = None\n    \n    # Iterate over all pairs to find the closest one\n    for pair in pairs:\n        dist = pair[1] - pair[0]\n        if dist < min_dist:\n            min_dist = dist\n            closest_pair = pair\n    \n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n\n    Args:\n        numbers: A list of floats with at least two elements.\n\n    Returns:\n        A new list of floats, where the smallest original value is mapped to 0.0 and the largest original value is mapped to 1.0.\n    \"\"\"\n    if len(set(numbers)) < 2:\n        raise ValueError(\"Input list must have at least two distinct elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n\n    return [(x - min_val) / range_val for x in numbers]"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # return 1 if no other divisors are found (e.g. prime numbers)"}
{"task_id": "HumanEval/25", "solution": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return sorted(factors)"}
{"task_id": "HumanEval/26", "solution": "from typing import List\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    count_dict = OrderedDict((x, True) for x in set(numbers) \n                             if list(numbers).count(x) == 1)\n    return list(count_dict.keys())"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n    return \"\".join(c.swp_case() if c.isalpha() else c for c in string)"}
{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x**2 + .... xs[n] * x**n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef dpoly_dx(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i-1) for i, coeff in enumerate(xs) if i > 0])\n\n\ndef find_zero(xs: list):\n    \"\"\" \n    Find a zero of the polynomial with coefficients in xs.\n    Only works for polynomials with an even number of coefficients and a non-zero leading coefficient.\n    \"\"\"\n    if len(xs) % 2 == 1 or xs[-1] == 0:\n        raise ValueError(\"Polynomial must have an even number of coefficients and a non-zero leading coefficient\")\n\n    # Initial guess for the zero\n    x0 = 1.0\n\n    # Tolerance for the zero\n    tol = 1e-5\n\n    while True:\n        # Evaluate the polynomial and its derivative at the current guess\n        p = poly(xs, x0)\n        dp = dpoly_dx(xs, x0)\n\n        # Check for convergence\n        if abs(p) < tol:\n            return round(x0, 2)\n\n        # Update the guess using the Newton-Raphson method\n        x0 = x0 - p / dp"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    result = l.copy()  # Create a copy of the original list\n    thirds = [x for i, x in enumerate(l) if i % 3 == 0]  # Get the elements at indices divisible by 3\n    sorted_thirds = sorted((x for i, x in enumerate(l) if i % 3 == 0))  # Sort the elements at indices divisible by 3\n    for i, x in enumerate(l): \n        if i % 3 == 0:\n            result[i] = sorted_thirds.pop(0)  # Replace the elements at indices divisible by 3 with the sorted values\n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    evens = sorted([x for i, x in enumerate(l) if i % 2 == 0])\n    result = []\n    even_iter = iter(evens)\n    for i, x in enumerate(l):\n        if i % 2 == 0:\n            result.append(next(even_iter))\n        else:\n            result.append(x)\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # unicycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef is_fibonacci(n: int) -> bool:\n    x = 0\n    y = 1\n    while y < n:\n        z = x + y\n        x = y\n        y = z\n    return y == n\n\ndef prime_fib(n: int) -> int:\n    count = 0\n    a = 0\n    b = 1\n    while True:\n        a, b = b, a + b\n        if is_prime(b) and is_fibonacci(b):\n            count += 1\n        if count == n:\n            return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()  # O(n log n) time complexity\n    for i in range(len(l) - 2):  # O(n) iterations\n        if i > 0 and l[i] == l[i - 1]:  # skip duplicates\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s < 0:\n                left += 1\n            elif s > 0:\n                right -= 1\n            else:\n                return True  # found a triple summing to zero\n    return False  # no such triple found"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars moving in opposite directions.\n\n    Args:\n        n (int): The number of cars in each set.\n\n    Returns:\n        int: The total number of collisions.\n    \"\"\"\n    return n ** 2"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be an integer between 2 and 9\")\n    result = \"\"\n    while x > 0:\n        x, remainder = divmod(x, base)\n        result = str(remainder) + result\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area for a right-angled triangle.\"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"\n    Return the median of elements in the list l.\n    \"\"\"\n    l.sort()  # sort the list in ascending order\n    n = len(l)  # get the length of the list\n    if n % 2 == 0:  # if the length is even\n        mid1 = l[n // 2 - 1]  # first median element\n        mid2 = l[n // 2]  # second median element\n        return (mid1 + mid2) / 2  # return the average of the two middle elements\n    else:  # if the length is odd\n        return l[n // 2]  # return the middle element"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s.lower()])"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(set(s0)) == sorted(set(s1))"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or \n            all(l[i] >= l[i+1] for i in range(len(l)-1)))"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    def is_prime(i: int) -> bool:\n        if i <= 1:\n            return False\n        if i == 2:\n            return True\n        if i % 2 == 0:\n            return False\n        max_divisor = int(i**0.5) + 1\n        for d in range(3, max_divisor, 2):\n            if i % d == 0:\n                return False\n        return True\n\n    max_factor = 1\n    for i in range(2, int(n**0.5) + 1):\n        while n % i == 0:\n            max_factor = i\n            n //= i\n    if n > max_factor:\n        max_factor = n\n    return max_factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Returns True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    Compute the derivative of a polynomial represented by its coefficients in `xs`.\n\n    Args:\n        xs: List of coefficients of the polynomial, where `xs[i]` is the coefficient of `x**i`.\n\n    Returns:\n        List of coefficients of the derivative polynomial.\n    \"\"\"\n    return [i * c for i, c in enumerate(xs[1:], start=1)]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    s = s.lower()  # convert to lowercase for case-insensitive comparison\n    count = 0\n    if s.endswith('y'):\n        count += 1\n    for c in s:\n        if c in 'aeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"\n    Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    digits = [int(d) for d in str(x)]  # Convert x to a list of digits\n    num_digits = len(digits)\n    effective_shift = shift % num_digits  # Handle cases where shift > num_digits\n    result_digits = digits[-effective_shift:] + digits[:-effective_shift]\n    return ''.join(map(str, result_digits))  # Convert back to a string"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    Returns the number of mangoes in a fruit basket given a string representing\n    the number of apples and oranges, and an integer representing the total number of fruits.\n\n    Args:\n        s (str): A string in the format of \"x apples and y oranges\" where x and y are integers.\n        n (int): The total number of fruits in the basket.\n\n    Returns:\n        int: The number of mangoes in the basket.\n    \"\"\"\n    # Split the input string into two parts: \"x apples\" and \"y oranges\"\n    parts = s.split(\" and \")\n    # Extract the numbers of apples and oranges from the parts\n    num_apples = int(parts[0].split()[0])\n    num_oranges = int(parts[1].split()[0])\n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total\n    num_mangoes = n - num_apples - num_oranges\n    return num_mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    evens = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens)[0], min(evens)[1]]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    max_val = -1\n    for num, count in count_dict.items():\n        if count >= num and num > max_val:\n            max_val = num\n    \n    return max_val"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            result.append(max_val)\n            lst.remove(max_val)\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle, return the area of the triangle\n    rounded to 2 decimal points if the three sides form a valid triangle. Otherwise\n    return -1.\n    Three sides make a valid triangle when the sum of any two sides is greater than\n    the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_valid(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    rev_arr = arr[::-1]  # Reverse the array\n    count = 0  # Initialize a counter for the number of changes needed\n    for i in range(len(arr)):\n        if i > len(arr) // 2:  # If we've reached the middle of the array, break the loop\n            break\n        if arr[i] != rev_arr[i]:  # If the current element is not equal to the corresponding element in the rev array\n            count += 1  # Increment the counter\n    return count  # Return the count of changes needed"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            while a % i == 0:\n                a //= i\n    if count >= 3:\n        return True\n    return False"}
{"task_id": "HumanEval/76", "solution": "import math\n\ndef is_simple_power(x, n):\n    root = round(x ** (1.0 / n))\n    return root ** n == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    return round(a ** (1. / 3)) ** 3 == a"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"\n    Count the number of hexadecimal digits that are prime numbers.\n\n    Args:\n        num (str): A hexadecimal number as a string.\n\n    Returns:\n        int: The number of prime hexadecimal digits.\n    \"\"\"\n    prime_digits = set(\"2357BD\")\n    return sum(c in prime_digits for c in num.upper())"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary_rep = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary_rep}db\"  # Add the extra 'db' characters at the start and end"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPAs to a list of letter grades using the specified grading scale.\n\n    Args:\n        grades (list[float]): A list of GPAs (Grade Point Averages)\n\n    Returns:\n        list[str]: A list of letter grades corresponding to the input GPAs\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(s):\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n == 1:\n        return 1  # single digit, only 1 satisfies the condition\n    else:\n        count = 9 * (10 ** (n-1) - 1)  # count of n-digit numbers that don't start with 1\n        count += 2 * (10 ** (n-1))  # add count of numbers that start or end with 1\n        return count"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    bin_sum = sum(int(digit) for digit in bin(N)[2:])  # calculate the sum of binary digits\n    return bin(bin_sum)[2:]  # convert the sum to binary and return as a string"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 != 0 and val % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string, where each word is sorted by ASCII value.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) if word.isalpha() else word for word in s.split())"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    Returns a list of coordinates (row, col) where x appears in the 2D list.\n    Coordinates are sorted by row (asc) and then by column (desc) within each row.\n    \"\"\"\n    coords = [(i, j) for i, row in enumerate(lst) for j, elem in enumerate(row) if elem == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the original array.\n\n    :param array: list of non-negative integers\n    :return: sorted copy of the original array\n    \"\"\"\n    if not array:\n        return []\n\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():  # only encrypt letters, not punctuation/space\n            ascii_offset = 65 if char.isupper() else 97  # 'A' or 'a'\n            char_code = ord(char) - ascii_offset\n            char_code = (char_code + 2**2) % 26  # rotate right by 2**2 = 4 positions\n            result += chr(char_code + ascii_offset)\n        else:\n            result += char  # don't change non-letter characters\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]"}
{"task_id": "HumanEval/91", "solution": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Count the number of sentences that start with \"I\", where sentences are\n    delimited by ., ?, or !.\n    \"\"\"\n    sentences = re.split(r'[.!?]+', S)\n    return sum(1 for sentence in sentences if sentence.strip().lower().startswith('i'))"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    \n    for char in message:\n        if char in vowels:\n            if char.islower():\n                encoded_char = alphabet[(alphabet.index(char) + 2) % 26]\n            else:\n                encoded_char = alphabet[(alphabet.swichcase().index(char.swichcase()) + 2) % 26].swichcase()\n        else:\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n        \n        encoded_message += encoded_char\n    \n    return encoded_string"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_div = int(n**0.5) + 1\n        for i in range(3, max_div, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    max_prime = max((x for x in lst if is_prime(x)), default=0)\n    return sum_of_digits(max_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    if not d:  # if the dictionary is empty, return False\n        return False\n    \n    key_cases = set(key case_ for key in d for case_ in [(islower(), 'lower'), (isupper(), 'upper')] if case_[0](key))\n    \n    return len(key_cases) == 1  # if all keys have the same case, return True, else False"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper() and c.lower() in 'aeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Return the closest integer to the given value, rounding away from zero if equidistant.\n    \"\"\"\n    num = float(value)\n    if num >= 0:\n        return round(num + 0.1) if num % 1 >= 0.5 else round(num)\n    else:\n        return round(num - 0.1) if num % 1 <= -0.5 else round(num)"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, returns a list of the number of stones in each level of a pile.\n    The first level has n stones. The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    \"\"\"\n    result = [n]\n    while len(result) < n:\n        if n % 2 == 0:  # n is even\n            n += 2\n        else:  # n is odd\n            n += 2\n        result.append(n)\n    return result"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return s.replace(\",\", \" \").split()"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1\n    even_nums = [i for i in range(x, y+1) if i % 2 == 0]\n    if even_nums:\n        return max(even_nums)\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m+1))\n    avg = round(total_sum / (m-n+1))\n    return bin(avg)"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        while n:\n            if n % 2 == 0:\n                return False\n            n = n // 10\n        return True\n\n    return sorted([i for i in x if has_even_digit(i)]))"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers not between 1 and 9 inclusive\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the array\n    arr.sort()\n    \n    # Reverse the array\n    arr = arr[::-1]\n    \n    # Map each digit to its corresponding name\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names[x-1] for x in arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:  # i is even\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:  # i is odd\n            sum_of_numbers = sum(range(1, i+1))\n            result.append(sum_of_numbers)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:  # check if i is a palindrome\n            if i % 2 == 0:  # check if i is even\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if sum(int(digit.lstrip('-')) for digit in str(abs(num))) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    if not arr:\n        return True\n    \n    min_idx = arr.index(min(arr))\n    sorted_arr = sorted(arr)\n    \n    if arr[min_idx:] + arr[:min_idx] == sorted_arr:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    evens_in_lst1 = sum(1 for num in lst1 if num % 2 == 0)\n    evens_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    odds_in_lst1 = len(lst1) - evens_in_lst1\n    \n    if evens_in_lst1 + evens_in_lst2 >= len(lst1):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, \n    return a dictionary of the letter(s) with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    if not test.strip():  # if the input string is empty or only whitespace, return an empty dict\n        return {}\n    \n    # Split the input string into a list of individual letters\n    letters = test.lower().split()\n    \n    # Use the Counter class from the collections module to count the occurrences of each letter\n    from collections import Counter\n    letter_counts = Counter(letters)\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Create a dictionary with the letter(s) that have the maximum count\n    max_count_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return max_count_letters"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    result = ''.join([ch for ch in s if ch not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, start=1):\n        count_odd = sum(c in '1357'  # or use `int(c) % 2 == 1` for a more general check\n                        for c in s)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            count_odd, count_odd, i, i))\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))"}
{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"\n    Returns a list of all words from string s that contain exactly n consonants,\n    in the order they appear in the string s.\n    \"\"\"\n    if not s:  # if the input string is empty, return an empty list\n        return []\n\n    # define a helper function to check if a character is a consonant\n    def is_consonant(c):\n        c = c.lower()  # convert to lowercase for case-insensitive check\n        return c.isalpha() and c not in 'aeiou'\n\n    # split the input string into individual words\n    words = s.split()\n\n    # initialize an empty list to store the result\n    result = []\n\n    # iterate through each word in the input string\n    for word in words:\n        # count the number of consonants in the current word\n        consonant_count = sum(1 for c in word if is_consonant(c))\n\n        # if the word has exactly n consonants, add it to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    rev_word = word[::-1]  # Reverse the word\n    for i, c in enumerate(rev_word):\n        if c in vowels and i > 0 and rev_word[i-1] not in vowels:\n            return c\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def can_be_balanced(a, b):\n        return is_balanced(a + b) or is_balanced(b + a)\n\n    return 'Yes' if can_be_balanced(lst[0], lst[1]) else 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(val for idx, val in enumerate(lst) if idx % 2 == 0 and val % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if len(str(abs(num))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list of odd numbers in the Collatz sequence.\n\n    :param n: a positive integer\n    :return: a sorted list of odd numbers in the Collatz sequence\n    \"\"\"\n    def collatz_sequence(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz_sequence(n)\n    return sorted([x for x in sequence if x % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Validate a date string in the format mm-dd-yyyy\n    Returns True if the date is valid, False otherwise\n    \"\"\"\n    if not date:  # rule 1: not empty\n        return False\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':  # check format mm-dd-yyyy\n        return False\n    month, day, year = map(int, [date[:2], date[3:5], date[6:]])\n    if month < 1 or month > 12:  # rule 3: month in range [1, 12]\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:  # 31 days in these months\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:  # 30 days in these months\n        if day < 1 or day > 30:\n            return False\n    else:  # February (28 or 29 days)\n        if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) and (day < 1 or day > 29):\n            return False\n        elif day < 1 or day > 28:\n            return False\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a count of lower-case letters with odd order in the alphabet if no delimiters exist,\n    otherwise split on whitespace or commas and return a list of words.\n    \"\"\"\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return [x.strip() for x in txt.split(',')]\n    else:\n        return sum((ord(c) - 97) % 2 == 1 for c in txt if c.islower())"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(val == count for count, val in Counter(lst).items() if count == 1 or count == lst.count(val))"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    mag_sum = 0\n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:\n            sign_product *= 0\n        mag_sum += abs(num)\n    return sign_product * mag_sum"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # right, left, down, up\n    min_path = None\n    min_path_val = float('inf')\n\n    def bfs(start, path, path_val):\n        nonlocal min_path, min_path_val\n        if len(path) == k:\n            if path_val < min_path_val:\n                min_path = path\n                min_path_val = path_val\n            return\n        for dx, dy in directions:\n            nx, ny = start[0] + dx, start[1] + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                npv = path_val * (N ** 2) + grid[nx][ny]\n                bfs((nx, ny), path + [grid[nx][ny]], npv)\n\n    for i in range(N):\n        for j in range(N):\n            bfs((i, j), [grid[i][j]], grid[i][j])\n\n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        trib_seq = [1, 3]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                trib_seq.append(1 + i / 2)\n            else:\n                trib_seq.append(trib_seq[i-1] + trib_seq[i-2] + trib_next(i, trib_seq))\n        return trib_seq\n\ndef trib_next(i, trib_seq):\n    if i + 1 <= len(trib_seq) - 1:\n        return trib_seq[i + 1]\n    else:\n        return tri(i + 1)[-1]"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in map(int, str(n)):\n        if digit % 2 == 0:  # even digit\n            return 0\n        product *= digit\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            elif len(stack) == 1:\n                stack.pop()\n            else:\n                return True\n    return False if len(stack) == 0 else False"}
{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i) ** 2 for i in lst)"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt.strip():  # if the string is empty or only whitespace, return False\n        return False\n    last_char = txt.rstrip()[-1]  # get the last non-whitespace character\n    if last_char.isalpha() and txt.count(' ' + last_char) == 0:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] <= arr[i-1]:\n            return i\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Returns a tuple (a, b) where 'a' is the largest of negative integers,\n    and 'b' is the smallest of positive integers in a list.\n    If there is no negative or positive integers, returns them as None.\n    \"\"\"\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    if not negatives:\n        largest_negative = None\n    else:\n        largest_negative = max(negatives)\n\n    if not positives:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positives)\n\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Compare two numbers (int, float, or str) and return the larger one in its original type.\n    If the values are equal, return None.\n    \"\"\"\n    # Normalize input types to float (if possible)\n    try:\n        a_float = float(a) if isinstance(a, str) else a\n        b_float = float(b) if isinstance(b, str) else b\n    except ValueError:\n        raise ValueError(\"Invalid input: both inputs must be numbers or strings representing numbers\")\n\n    if a_float > b_float:\n        return a if isinstance(a, type(a)) else type(a)(a)  # Return original type of a\n    elif a_float < b_float:\n        return b if isinstance(b, type(b)) else type(b)(b)  # Return original type of b\n    else:\n        return None  # Values are equal, return None"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    for a in range(2, n, 2):\n        for b in range(a, n, 2):\n            for c in range(b, n, 2):\n                for d in range(c, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all single spaces with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with a hyphen.\n    \"\"\"\n    while \"   \" in text:  # while there are 3 or more consecutive spaces\n        text = text.replace(\"   \", \"-\")  # replace them with a hyphen\n    return text.replace(\" \", \"_\")  # finally, replace single spaces with underscores"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"\n    Returns 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if there's exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.rssplit('.')\n\n    # Check if the part before the dot is not empty and starts with a Latin letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'Count'\n\n    # Check if there are no more than three digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n\n    # Check if the part after the dot is one of the allowed extensions\n    if after_dot.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            result += num ** 2\n        elif i % 4 == 0:\n            result += num ** 3\n        else:\n            result += num\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"\n    Returns True if x * n evaluates to a whole number, False otherwise.\n    x and n are string representations of fractions in the format <numerator>/<denominator>\n    \"\"\"\n    def eval_frac(frac):\n        num, denom = map(int, frac.split('/'))\n        return num, denom\n\n    num_x, denom_x = eval_frac(x)\n    num_n, denom_n = eval_frac(n)\n\n    product_num = num_x * num_n\n    product_denom = denom_x * denom_n\n\n    return product_num % product_denom == 0"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted(enumerate(map(abs, nums)), key=lambda x: (sum(int(digit) for digit in str(x[1]).lstrip('-')), x[0])))[1:]"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num) % 10) % 2 != 0 and (abs(num) // (10 ** (len(str(abs(num))) - 1))) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    \"\"\"\n    Returns a tuple of planets whose orbits are between planet1 and planet2, sorted by proximity to the sun.\n    If planet1 or planet2 are not valid planet names, an empty tuple is returned.\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"J Switer\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n\n    return tuple(sorted((planets[i] for i in range(idx1 + 1, idx2)), key=planets.index))"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"\n    Returns x if n is a prime number, otherwise returns y.\n\n    Args:\n        n (int): The number to check for primality.\n        x (any): The value to return if n is prime.\n        y (any): The value to return if n is not prime.\n\n    Returns:\n        x if n is prime, y otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2 != 0)"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def extension_strenght(ext):\n        return sum(1 if c.isupper() else -1 if c.islower() else 0 for c in ext)\n\n    strongest_ext = max(extensions, key=extension_strenght)\n    return f\"{class_name}.{strongest_ext}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Return True if the second word or any of its rotations is a substring in the first word.\n    \"\"\"\n    if len(b) > len(a):\n        return False  # if b is longer than a, it can't be a substring or rotation\n\n    # generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n\n    # check if any rotation is a substring of a\n    return any(rot in a for rot in rotations)"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):  # convert to string to iterate over digits\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its Roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    \"\"\"\n    Given the lengths of the three sides of a triangle, return True if the three\n    sides form a right-angled triangle, False otherwise.\n    \"\"\"\n    # Sort the sides in non-decreasing order\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is the sum of the squares of the other two sides\n    return c**2 == a**2 + b**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    def count_uniques(word):\n        return len(set(word))\n\n    max_uniques = max(count_uniques(word) for word in words)\n    max_words = [word for word in sorted(words) if count_uniques(word) == max_uniques]\n    return max_words[0]"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    Simulates a hungry rabbit eating carrots.\n\n    Args:\n        number (int): The number of carrots already eaten.\n        need (int): The number of carrots needed to eat.\n        remaining (int): The number of remaining carrots in stock.\n\n    Returns:\n        list: A list of two elements: [total_eaten, carrots_left]\n            where total_eaten is the total number of carrots eaten after the meal,\n            and carrots_left is the number of carrots left after the meal.\n    \"\"\"\n    total_needed = number + need\n    if total_needed <= remaining:\n        total_eaten = total_needed\n        carrots_left = remaining - total_needed\n    else:\n        total_eaten = number + remaining\n        carrots_left = 0\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operators, operands):\n    \"\"\"\n    Evaluate an algebraic expression built from two lists: operators and operands.\n\n    Args:\n        operators (list[str]): A list of basic algebra operations (+, -, \\*, //, \\*\\*).\n        operands (list[int]): A list of non-negative integers.\n\n    Returns:\n        int: The result of evaluating the algebraic expression.\n    \"\"\"\n    result = operands[0]\n    for i in range(len(operators)):\n        if operators[i] == '+':\n            result += operands[i + 1]\n        elif operators[i] == '-':\n            result -= operands[i + 1]\n        elif operators[i] == '*':\n            result *= operands[i + 1]\n        elif operators[i] == '//':\n            result = result // operands[i + 1]\n        elif operators[i] == '**':\n            result = result ** operands[i + 1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    has_letters = False\n    for c in s:\n        if c.isalpha():  # if c is a letter\n            has_letters = True\n            result += c.swaporcase()  # swap case (lower<->upper)\n        else:\n            result += c  # keep non-letters as is\n    if not has_letters:\n        result = result[::-1]  # if no letters, reverse the string\n    return result"}
{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5()  # Create an MD5 hash object\n    md5_hash.update(text.encode('utf-8'))  # Update the hash object with the bytes of the input string\n    return md5_hash.hexdigest()  # Return the hexadecimal representation of the hash"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, single digits in ascending order.\n\n    For example:\n    generate_even_digits(2, 8) => [2, 4, 6, 8]\n    generate_even_digits(8, 2) => [2, 4, 6, 8]\n    generate_even_digits(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a  # Swapping values to ensure a <= b\n    return [i for i in range(a, b+1) if i % 2 == 0 and 0 <= i <= 9]"}
