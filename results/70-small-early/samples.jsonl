{"task_id": "HumanEval/0", "solution": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()  # sort the list in place\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = []\n    count = 0\n    for char in paren_string:\n        if char == '(':\n            temp.append(char)\n            count += 1\n        elif char == ')':\n            temp.append(char)\n            count -= 1\n            if count == 0:\n                result.append(''.join(temp))\n                temp = []\n    return result"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "solution": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n  for operation in operations:\n    balance += operation\n    if balance < 0:\n      return True\n  return False"}
{"task_id": "HumanEval/4", "solution": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate Mean Absolute Deviation (MAD) for a given list of input numbers.\n    \n    Parameters:\n    numbers (List[float]): A list of float numbers.\n    \n    Returns:\n    float: The Mean Absolute Deviation (MAD) of the given dataset.\n    \"\"\"\n    # Calculate the mean of the dataset\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute deviation from the mean for each data point\n    absolute_deviation = [abs(x - mean_value) for x in numbers]\n    \n    # Calculate the Mean Absolute Deviation (MAD )\n    mad = sum(absolute_deviation) / len(numbers)\n    \n    return mad"}
{"task_id": "HumanEval/5", "solution": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"task_id": "HumanEval/6", "solution": "def parse_nested_parens(paren_string: str) -> List[int]:\n    max_levels = []\n    temp_level = 0\n    max_level = 0\n    temp_levels = []\n    temp_max_level = 0\n    for char in paren_string:\n        if char == '(':\n            temp_level += 1\n            max_level = max(max_level, temp_level)\n            temp_max_level = max(max_level, temp_level)\n            temp_levels.append(temp_level)\n        elif char == ')':\n            temp_level -= 1\n    max_levels.append(max_level)\n    return max_levels"}
{"task_id": "HumanEval/7", "solution": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return total_sum, product"}
{"task_id": "HumanEval/9", "solution": "from collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    # Initialize the result with the first element and the queue with the first element\n    result = [numbers[0]]\n    max_queue = deque([numbers[0]])\n    \n    # Iterate over the rest of the list\n    for num in numbers[1:]:\n        # If the current number is greater than the last number in the queue, \n        # remove all the numbers from the end of the queue that are smaller than the current number\n        while max_queue and max_queue[-1] < num:\n            max_queue.pop()\n        # Add the current number to the queue\n        max_queue.append(num)\n        # Add the maximum number seen so far to the result\n        result.append(max_queue[0])\n    \n    return result"}
{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n\n    for i in range(len(string) // 2):\n        postfix = string[i:][::-1]\n        if postfix + string == postfix[::-1]:\n            return postfix + string\n\n    return string + string[::-1][::-1]  # edge case for single char strings"}
{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Ensure both strings are of equal length\n    if len(a) != len(b):\n        raise ValueError(\"Both strings must be of equal length\")\n\n    # Perform binary XOR using zip and a lambda function\n    result = ''.join(str(ord(x) ^ ord(y)) for x, y in zip(a, b))\n    return result"}
{"task_id": "HumanEval/12", "solution": "def longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): A list of strings.\n\n    Returns:\n        Optional[str]: The longest string in the list. Returns None if the input list is empty.\n    \"\"\"\n    # Check if the input list is empty\n    if not strings:\n        return None\n\n    # Initialize the longest string with the first string in the list\n    longest_str = strings[0]\n\n    # Iterate over the rest of the strings in the list\n    for string in strings[1:]:\n        # If the length of the current string is greater than the longest string found so far\n        if len(string) > len(longest_str):\n            # Update the longest string\n            longest_str = string\n\n    # Return the longest string\n    return longest_str"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)"}
{"task_id": "HumanEval/14", "solution": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string)+1)]"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    return len(set(char.lower() for char in string))"}
{"task_id": "HumanEval/17", "solution": "def parse_music(music_string: str) -> List[int]:\n    note_duration = {\n        'o': 4,\n            'o|': 2,\n            'o |': 2,  # handle space between 'o' and '|' cases\n            '|': 0  # handle case when there is no note before '|'\n    }\n    result = []\n    temp = []\n    for char in music_string:\n        if char != ' ':\n            temp.append(char)\n        else:\n            temp_str = ''.join(temp)\n            if temp_str:\n                result.append(note_duration.get(temp_str, 0))\n    if temp:  # handle case when there is no space at the end\n        result.append(note_duration.get(''.join(temp), 0))\n    return result"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    return string.count(substring)"}
{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': '0', 'one': '1', 'two': '2', 'three': '3', 'four': '4',\n        'five': '5', 'six': '6', 'seven': '7', 'eight': '8', 'nine': '9'\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "solution": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]]:\n    numbers.sort()  # sort the list in ascending order\n    min_diff = float('inf')  # initialize min difference as infinity\n    closest_pair = None  # initialize closest pair as None\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n\n    Args:\n        numbers: A list of float numbers\n\n    Returns:\n        A new list of float numbers where the smallest number is 0 and the largest is 1\n    \"\"\"\n    # Check if the input list is empty\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    # Check if the input list has at least two elements\n    if len(numbers) < 2:\n        raise ValueError(\"Input list should have at least two elements\")\n\n    # Find the minimum and maximum values in the list\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    # Calculate the range of the original values\n    val_range = max_val - min_val\n\n    # Check for division by zero error\n    if val_range == 0:\n        return [0.0] * len(numbers)\n\n    # Rescale the list of numbers\n    rescaled_numbers = [(x - min_val) / val_range for x in numbers]\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "solution": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        divisor += 1\n    return factors"}
{"task_id": "HumanEval/26", "solution": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n                seen[num] = True\n                result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    return string.swapcase()"}
{"task_id": "HumanEval/28", "solution": "def concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    result = \"\"  # Initialize an empty string to store the result\n    for string in strings:  # Iterate over each string in the list\n        result += string  # Concatenate each string to the result\n    return result"}
{"task_id": "HumanEval/29", "solution": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "solution": "def find_zero(xs: list):\n    def derivative(xs: list, x: float):\n        \"\"\"\n        Evaluates the derivative of a polynomial at point x.\n        \"\"\"\n        return sum([i * coeff * x**(i-1) for i, coeff in enumerate(xs[1:])])\n    \n    def poly(xs: list, x: float):\n        \"\"\"\n        Evaluates polynomial with coefficients xs at point x.\n        \"\"\"\n        return sum([coeff * x**i for i, coeff in enumerate(xs)])\n    \n    # initial guess\n    x = 1\n    tolerance = 1e-5\n    while True:\n        x_new = x - poly(xs, x) / derivative(xs, x)\n        if abs(x - x_new) < tolerance:\n            return x_new\n        x = x_new"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    result = l.copy()  # Create a copy of the original list\n    third_elements = [l[i] for i in range(2, len(l) + 1, 3)]  # Get every third element\n    third_elements.sort()  # Sort them\n    for i in range(2, len(l) + 1, 3):\n        result[i - 1] = third_elements.pop(0)  # Replace every third element with the sorted one\n    return result"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    return max(l)"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n + 1):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    even_index = [x for i, x in enumerate(l) if i % 2 == 0 for j, x in enumerate([x]) if i % 2 == 0]\n    even_index.sort()\n    result = [x for i, x in enumerate(l) if i % 2 != 0] + even_index\n    result = [x for i, x in enumerate(l + l) if i % 2 == 0 and i % 4 != 0] + result[::2]\n    return result"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(num: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is a Fibonacci number and it's also prime.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        if i > 0 and l[i - 1] == l[i]:\n            continue\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    return [i + 1 for i in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int):\n    if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    return (a * h) / 2"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib4_sequence = [0, 0, 1, 1] + [0]*(n-2) + [0]\n        for i in range(3, n+1):\n            fib4_sequence[i] = fib4_sequence[i-1] + fib4_sequence[i-2] + fib4_sequence[i-3] + fib4_sequence[i-4]\n        return fib4_sequence[n-1]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\")) % 26) + ord(\"a\")) for ch in s][::-1])[::-1]"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char.lower() not in vowels])"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1)))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1)))\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    def is_prime(m: int) -> bool:\n        \"\"\"Return True if m is a prime number, False otherwise.\"\"\"\n        if m < 2:\n            return False\n        for i in range(2, int(m ** 0.5) + 1):\n            if m % i == 0:\n                return False\n        return True\n\n    largest_factor = 2\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n    if n > 1:\n        largest_factor = n\n    return largest_factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int):\n    \"\"\"\n    This function sums up all the numbers from 1 to n.\n    \n    Parameters:\n    n (int): The input number up to which we want to sum.\n    \n    Returns:\n    int: The sum of all numbers from 1 to n.\n    \"\"\"\n    # We use the formula for the sum of the first n natural numbers: n*(n+1)/2\n    # This formula is derived from the fact that the sum of the first n natural numbers\n    # is equal to the sum of the first n/2 natural numbers multiplied by 2.\n    return n*(n+1)//2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:  # if stack is empty\n                return False\n            else:\n                stack.pop()\n    return not stack  # return True if stack is empty"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs: list):\n    if not xs:\n        return []\n    else:\n        return [i * x for i, x in enumerate(xs[1:]),][1:]"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int, memo={}):\n    if n <= 2:\n        return 0 if n < 2 else 1\n    elif n not in memo:\n        memo[n] = fibfib(n-1, memo) + fibfib(n-2, memo) + fibfib(n-3, memo)\n    return memo[n]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    if s[-1].lower() == 'y':\n        count += 1\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    # Convert the integer to a string to easily access each digit\n    x_str = str(x)\n    \n    # Calculate the number of digits in x\n    num_digits = len(str(x))\n    \n    # If shift is greater than or equal to the number of digits, \n    # simply reverse the digits\n    if shift >= num_digits:\n        return x_str[::-1]\n    \n    # Otherwise, perform a circular shift to the right\n    else:\n        # Calculate the number of digits to shift to the right\n        shift_right = shift % num_digits\n        \n        # Perform the circular shift\n        shifted_str = x_str[-shift_right:] + x_str[:-shift_right]\n        \n        return shifted_str"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    apples, oranges = [int(i) for i in s.split() if i.replace(\",\", \"\").replace(\".\", \"\").isdigit()][::-1][::-1]: return n - apples - oranges"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_nodes = [node for i, node in enumerate(arr) if i % 2 == node % 2 == 0]\n    if not even_nodes:\n        return []\n    else:\n        min_even = min(even_nodes)\n        return [min_even, even_nodes.index(min_even)]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    for i in set(lst):\n        if lst.count(i) >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    if not lst:\n        return []\n    \n    result = []\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    while lst_copy:\n        result.append(min(lst_copy))\n        lst_copy.remove(min(lst_copy))\n        if lst_copy:\n            result.append(max(lst_copy))\n            lst_copy.remove(max(lst_copy))\n    return result"}
{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides can form a valid triangle\n    if (a + b) > c and (b + c) > a and (a + c) > b:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Round the area to 2 decimal points\n        area = round(area, 2)\n        return area\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    count = 0\n    for i in range(n // 2):\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    len1 = sum(len(i) for i in lst1)\n    len2 = sum(len(i) for i in lst2)\n    \n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a number is the multiplication of 3 prime numbers\"\"\"\n    if a < 2:\n        return False\n    count = 0\n    for i in range(2, a):\n        if a % i == 0:\n            if is_prime(i):\n                count += 1\n    return count >= 3"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    if x <= 0:\n        return False\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if x == 1:\n        return True\n    power = round(x ** (1 / n)) ** n\n    return power == x"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    if a < 0:\n        a = abs(a)\n        cube_root = round(a ** (1/3.0)) ** 3\n        if cube_root ** (1/3.0) == round(cube_root ** (1/3.0)):\n            return True\n    else:\n        cube_root = round(a ** (1/3.0)) ** 3\n        if cube_root ** (1/3.0) == round(cube_root ** (1/3.0)):\n            return True\n    return False"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    prime_hex = {'2': True, '3': True, '5': True, '7': True, 'B': True, 'b': True, 'B': True, 'D': True, 'd': True, 'D': True}\n    count = 0\n    for char in num.upper().casefold():\n        if char in prime_hex:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\""}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    grade_table = {\n        'A+': lambda x: x >= 4.0,\n        'A': lambda x: 3.7 <= x < 4.0,\n        'A-': lambda x: 3.3 <= x < 3.7,\n        'B+': lambda x: 3.0 <= x < 3.3,\n        'B': lambda x: 2.7 <= x < 3.0,\n        'B-': lambda x: 2.3 <= x < 2.7,\n        'C+': lambda x: 2.0 <= x < 2.3,\n        'C': lambda x: 1.7 <= x < 2.0,\n        'C-': lambda x: 1.3 <= x < 1.7,\n        'D+': lambda x: 1.0 <= x < 1.3,\n        'D': lambda x: 0.7 <= x < 1.0,\n        'D-': lambda x: 0.0 <= x < 0.7,\n        'E': lambda x: x < 0.0\n    }\n\n    return [max([k for k, v in grade_table.items() if v(gpa)], key=lambda x: ('E', 'D-', 'D', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+').index(x)) for gpa in grades]"}
{"task_id": "HumanEval/82", "solution": "def prime_length(s):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(s))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    # Count of n-digit numbers that start with 1\n    starts_with_one = 10**(n-1)\n    \n    # Count of n-digit numbers that end with 1\n    ends_with_one = 10**(n-1) if n > 1 else 1\n    \n    # Subtract the count of numbers that start and end with 1\n    # because they are counted twice\n    if n > 1:\n        starts_ends_with_one = 10**(n-2)\n    else:\n        starts_ends_with_one = 1\n    \n    # Return the total count\n    return starts_with_one + 10**(n-1) - starts_ends_with_one"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary_sum = bin(sum(int(digit) for digit in bin(N)[2:]))[2:]\n    return binary_sum"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    return sum(i for i, index in enumerate(lst) if index % 2 != 0 and i % 2 == 0)"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(i)) if i.isalpha() else ''.join(sorted(i, key=lambda x: x.lower())) for i in s.split()[::-1])[::-1]"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = [(i+1) for row in enumerate(lst) for i, val in enumerate(row) if val == x]\n    result = [(i//len(str(i))+1) for i in str(i+1) for j in str(i+1)[::-1].split()[::-1]] \n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    # Check if the array is empty\n    if not array:\n        return array.copy()\n\n    # Create a copy of the original array\n    array_copy = array.copy()\n\n    # Calculate the sum of the first and last index values\n    sum_of_first_last = array[0] + array[-1]\n\n    # Check if the sum is odd or even\n    if sum_of_first_last % 2 != 0:\n        # If the sum is odd, sort the array in ascending order\n        array_copy.sort()\n    else:\n        # If the sum is even, sort the array in descending order\n        array_copy.sort(reverse=True)\n\n    return array_copy"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.lower() <= 'Vv':  # Check if the character is uppercase or lowercase\n                result += chr((ord(char.lower()) - 97 + 2) % 26 + 97 - 32 * char.isupper().upper().isalpha()).upper() if char.isupper() else chr((ord(char.lower()) - 97 + 2) % 26 + 97).upper().lower()\n            else:\n                result += chr((ord(char.lower()) - 97 + 2) % 26 + 97 - 32 * char.isupper().upper().isalpha()).upper() if char.isupper() else chr((ord(char.lower()) - 97 + 2) % 26 + 97).upper().lower()\n    return result"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    if len(set(lst)) < 2: # if there are duplicate elements or list has less than 2 unique elements\n        return None\n    else:\n        lst = list(set(lst)) # remove duplicates\n        lst.sort()\n        return lst[1]"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in 'aeiou':\n                shift = 2 if char.islower() else -2\n                encoded_message += chr((ord(char).lower() - 97 + shift).upper() if char.isupper() else ord(char).lower() - 97 + shift).upper() if char.isupper() else ord(char).lower() - 97 + shift).swapcase() if char.isupper() else char.swapcase()\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = max([x for x in lst if is_prime(x)], default=0)\n    return sum_of_digits(largest_prime)"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(input_dict):\n    if not isinstance(input_dict, dict):  # Check if input is a dictionary\n        raise TypeError(\"Input must be a dictionary\")\n\n    if not input_dict:  # Check if dictionary is empty\n        return False\n\n    all_lower = all(key.islower() for key in input_dict.keys())\n    all_upper = all(key.isupper() for key in input_dict.keys())\n\n    return all_lower or all_upper"}
{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    return abs(a) % 10 * abs(b) % 10"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char.lower() in 'aeiou':\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    if not isinstance(value, str):\n        raise ValueError(\"Input must be a string\")\n    try:\n        num = float(value)\n        if num - int(num) == 0.5:\n            if num > 0:\n                return int(num + 0.5)\n            else:\n                return int(num - 0.5)\n        else:\n            return round(num)\n    except ValueError:\n        raise ValueError(\"Input must be a string representation of a number\")"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    pile = [n]\n    for _ in range(n-1):\n        if n % 2 == 0:\n            n += 1 if n % 2 == 0 else -1\n        else:\n            n += 1\n        pile.append(n)\n    return pile"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split()]"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    if x > y:\n        return -1  # swap x and y if needed\n    x, y = min(x, y), max(x, y)\n    for i in range(y, x-1, -2):  # count down by 2s from y\n        if i % 2 == 0:\n            return i\n    return -1  # no even number found"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)[2:]"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    def has_even_digit(n):\n        \"\"\"Helper function to check if a number has any even digit.\"\"\"\n        while n:\n            if (n % 10) % 2 == 0:\n                return False\n            n //= 10\n        return True\n\n    # Filter out numbers that have even digits\n    result = [i for i in x if has_even_digit(i)]\n    # Return a sorted list\n    return sorted(set(result))"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Create a dictionary to map numbers to their corresponding names\n    num_to_name = {\n        \"1\": \"One\",\n        \"2\": \"Two\",\n        \"3\": \"Three\",\n        \"4\": \"Four\",\n        \"5\": \"Five\",\n        \"6\": \"Six\",\n        \"7\": \"Seven\",\n        \"8\": \"Eight\",\n        \"9\": \"Nine\"\n    }\n    \n    # Filter out numbers that are not between 1 and 9 inclusive\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Map each number to its corresponding name\n    result = [num_to_name[str(x)] for x in filtered_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # calculate factorial of i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # calculate sum of numbers from 1 to i\n            total = sum(range(1, i + 1))\n            result.append(total)\n    return result"}
{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    even_count = len([i for i in range(1, n + 1) if str(i) == str(i)[::-1]] and [i % 2 == 0 for i in range(1, n + 1)])\n    odd_count = len([i for i in range(1, n + 1) if str(i) == str(i)[::-1]] and [i % 2 != 0 for i in range(1, n + 1)])\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        digits = [int(digit) for digit in str(abs(num))] if num != 0 else [0]\n        if sum([abs(int(digit)) for digit in str(abs(num))]) > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    arr.sort()  # Create a copy of the original array\n    arr.sort()  # Sort the array in-place\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    even_count1 = len([i for i in lst1 if i % 2 == 0])\n    odd_count1 = len(lst1) - even_count1\n    even_count2 = len([i for i in lst2 if i % 2 == 0])\n    odd_count = odd_count1 - even_count2\n    if odd_count % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    if not test:\n        return {}\n    \n    test_dict = {}\n    for char in test.split():\n        if char in test_dict:\n            test_dict[char] += 1\n        else:\n            test_dict[char] = 1\n    \n    max_count = max(test_dict.values())\n    result = {k: v for k, v in test_dict.items() if v == max_count}\n    \n    return result"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Remove all characters in s that are equal to any character in c\n    result = ''.join([char for char in s if char not in c])\n    # Check if the result string is palindrome\n    is_palindrome = result == result[::-1]\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = len([i for i in s if int(i) % 2 != 0])\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = float('inf')\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import heapq\n\ndef max_fill(grid, capacity):\n    queue = []\n    for i in range(len(grid)):\n        heapq.heappush(queue, (len([x for x in row if x == 1 for row in grid[i:]])))\n    result = 0\n    while queue:\n        temp = []\n        for _ in range(min(len(queue), capacity)):\n            temp.append(heapq.heappop(queue)[::-1])\n        for i in range(len(temp)):\n            if temp:\n               \ttemp[i] -= 1\n\t\t\t\tif temp[i] > 0:\n\t\t\t\t\theapq.heappush(queue, temp[i])\n    return result + len(queue)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = [word for word in words if len([char for char in word if char.lower() in vowels.upper().lower().swapcase() if char.lower() in vowels.upper().lower().swapcase()][::-1].upper().lower().swapcase() for char in reversed(word) if char.lower() in vowels.upper().lower().swapcase()]) == n][::-1]\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() in vowels:\n            if i > 0 and i < len(word) - 1:\n                if not (word[i - 1].lower() in vowels or word[i + 1].lower() in vowels):\n                    return word[i].upper() if word[i].isupper() else word[i].lower()\n    return \"\""}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    if len(lst[0]) != len(lst[1]):\n        return 'No'\n    else:\n        return 'Yes' if is_balanced(''.join(reversed(lst[0])) + ''.join(reversed(lst[1])) or ''.join(reversed(lst[1])) + ''.join(reversed(lst[0])) or ''.join(reversed(lst[0][::-1])): 'Yes'\n        else: 'No'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(i for i, idx in enumerate(lst)[1::2] if i % 2 != 0)"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([i for i in sequence if i % 2 != 0])"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    # Check if the date string is not empty\n    if not date:\n        return False\n\n    # Split the date string into day, month, year\n    day, month, year = date.split('-')\n\n    # Check if the date string is in the format: dd-mm-yyyy\n    if len(day) != 2 or len(month) != 2:\n        return False\n\n    # Check if the day, month, year are all digits\n    if not (day.isdigit() and month.isdigit() and year.isdigit()):\n        return False\n\n    # Check if the day, month, year are all valid digits\n    day = int(day)\n    month = int(month)\n    year = int(year)\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 28:\n            return False\n    else:\n        if day < 1 or day > 30:\n            return False\n\n    # If all checks pass, then the date is valid\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    # Split on whitespace\n    words = txt.split()\n    if len(words) > 1:\n        return words\n    else:\n        # Split on commas\n        words = txt.split(',')\n        if len(words) > 1:\n            return words\n    # If no commas or whitespaces, count odd order lower-case letters\n    else:\n        count = 0\n        for char in txt.lower():\n            if char.isalpha():\n                if ord(char.lower()) - 97 % 2 != 0:\n                    count += 1\n        return count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return lst == sorted(set(lst)) and len(lst) == len(set(lst))"}
{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef intersection(interval1, interval2):\n    \"\"\"Find the intersection of two intervals\"\"\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        # There is an intersection\n        intersection_length = end - start + 1\n        if intersection_length > 0:\n            if is_prime(intersection_length):\n                return \"YES\"\n    return \"NO\""}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "from collections import deque\nfrom heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (0, 1)]\n    visited = set()\n    queue = [(grid[0][0],), ]\n    min_path = float('inf') * [float('inf')]\n    for i in range(N):\n        for j in range(N):\n                if i != 0 or j != 0:\n                    queue.append((min(grid[i-1][j-1][0],),))\n    while queue:\n        path = heappop(queue)[0]\n        if len(path) > k:\n                continue\n        if len(path) == k:\n            if path < min_path:\n                min_path = path\n            continue\n        for i in range(N):\n            for j in range(N):\n                if (i, j) not in visited:\n                    visited.add((i, j))\n                    heappush(queue, (path + (grid[i][j],)))\n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n    else:\n        trib = [0, 1, 1] + [0] * (n - 1)\n        for i in range(2, n + 2):\n            if i % 2 == 0:\n                trib.append(i // 2 + 1)\n            else:\n                trib.append(trib[i - 1] + trib[i - 2] + (trib[i - 3] if i > 2 else 0))\n        return trib[:n + 1]"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    nested = False\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if len(stack) > 1:\n                nested = True\n            stack.pop()\n    return nested"}
{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    return sum([i**2 for i in [j if isinstance(j, int) else -(-j if j<0 else j)+1 for j in lst]])"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    # Remove leading and trailing spaces\n    txt = txt.strip()\n    \n    # Check if the string is not empty\n    if not txt:\n        return False\n    \n    # Check if the last character is an alphabetical character\n    if not txt[-1].isalpha():\n        return False\n    \n    # Check if the last character is not the last character of the string\n    if txt[-1] != txt:\n        return True\n    \n    # If none of the above conditions are met, return False\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if i > 0 and arr[i - 1] <= arr[i]:\n            continue\n        else:\n            return i - 1\n    return -1"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    if negatives:\n        largest_negative = max(negatives)\n    else:\n        largest_negative = None\n    \n    if positives:\n        smallest_positive = min(positives)\n    else:\n        smallest_positive = None\n    \n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n//2 + 1, 2):\n                for remainder in range(k, n//2 + 1, 2):\n                    if i + j + k + remainder == n:\n                        return True\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    if n < 1:\n        raise ValueError(\"Input should be a positive integer.\")\n    result = 1\n    for i in range(1, n + 1):\n        temp = 1\n        for j in range(1, i + 1):\n            temp *= j\n        result *= temp\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    words = text.split(' ')\n    new_words = []\n    for word in words:\n        new_words.append(word)\n    new_text = '_'.join(new_words).replace('__', '-').replace('__', '_')\n    return new_text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, ext = parts\n    if len([c for c in name for _ in range(c.isdigit())]) > 2:\n        return 'No'\n    if not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'dll']:\n        return 'No'\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    result = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            result += x ** 2\n        elif i % 4 == 0:\n            result += x ** 3\n        else:\n            result += x\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    # Split the fractions\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the least common multiple\n    gcd = lambda a, b: simplify(x, n) if (a == b) else simplify(x, n) if (a == 1) else simplify(x, b) if (b == 1) else simplify(x, min(a, b)) if (a > b) else simplify(x, min(a, b)) for c in range(1, 2) \n    gcd_num = gcd(x_num, n_den)\n    gcd_den = gcd(n_num, x_den)\n    \n    # Calculate the greatest common divisor\n    gcd_num = gcd_num if gcd_num else 1\n    gcd_den = gcd_den if gcd_den else 1\n    \n    # Simplify the fractions\n    x_num_simplified, n_num_simplified = x_num // gcd_num, n_num // gcd_den\n    x_den_simplified, n_den_simplified = x_den // gcd_den, n_den // gcd_den\n    \n    # Check if the result is a whole number\n    return x_num_simplified * n_num_simplified == x_den_simplified * n_den_simplified"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted(enumerate(nums), key=lambda x: (sum_digit(x[1]) if x[1] >= 0 else -sum_digit(-x[1]), x[0]))\n\n\ndef sum_digit(n):\n    \"\"\"\n    Helper function to calculate the sum of digits of a number.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n))) if n != 0 else 0 else 0\n    # return sum(int(digit) for digit in str(abs(n))) if n != 0 else 0  # alternative way\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 9:  # to handle negative numbers\n            if abs(num) % 10 % 2 != 0 and abs(num) // 10**((len(str(abs(num))) - 1)) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 2)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return planets[index1 + 1:index2]"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out the strings that have odd lengths\n    lst = [i for i in lst if len(i) % 2 == 0]\n    # Sort the list by the length of each string\n    lst = sorted(lst, key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    def is_prime(m):\n        if m < 2:\n            return False\n        for i in range(2, int(m**0.5) + 1):\n            if m % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return sum([i**2 for i in lst if isinstance(i, int) and i > 0 and i % 2 != 0] * 2)"}
{"task_id": "HumanEval/152", "solution": "def compare(game,guess):\n    return [abs(x) if x != y else 0 for x, y in zip(game, guess)]"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    def extension_strength(ext):\n        return len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()])\n\n    strongest_ext = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_ext}\".title()"}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    # Check if b is a substring of a\n    if b in a:\n        return True\n    # Check if any rotation of b is a substring of a\n    else:\n        for i in range(len(b) - 1):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(n):\n    even = 0\n    odd = 0\n    for digit in str(abs(n)):  # convert to string to iterate over each digit\n        if int((abs(n) // 10**((len(str(abs(n))) - 1) - (len(str(abs(n))) - 1 - len(str(abs(n)))))) % 10**(len(str(abs(n))) - 1)) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        80: 'lxxx', 70: 'lxx', 60: 'lx', 50: 'l', 40: 'xl', 30: 'xxx',\n        20: 'xx', 10: 'x', 9: 'ix', 8: 'viii', 7: 'vii', 6: 'vi', 5: 'v',\n        4: 'iv', 3: 'iii', 2: 'ii', 1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"task_id": "HumanEval/157", "solution": "import math\n\ndef right_angle_triangle(a, b, c):\n    # Check if the input sides can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    # Check if the triangle is a right-angled triangle\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    unique_chars = [len(set(word)) for word in words]\n    max_unique = max(unique_chars)\n    max_unique_words = [word for word, count in zip(words, unique_chars) for _ in words if len(set(word)) == max_unique][::-1]\n    return max(max_unique_words, default=\"\") if max_unique_words else \"\""}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = min(number + need, number + remaining)\n    remaining_carrots = remaining - (need if need <= remaining else remaining)\n    return [total_eaten, remaining_carrots]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    # Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result = eval(str(result)) + operand[i+1]\n        elif operator[i] == '-':\n            result = eval(str(result)) - operand[i+1]\n        elif operator[i] == '*':\n            result = eval(str(result)) * operand[i+1]\n        elif operator[i] == '//':\n            result = eval(str(result)) // operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    if not any(c.isalpha() for c in s):\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/162", "solution": "def string_to_md5(text):\n    if not text:\n        return None\n    else:\n        from hashlib import md5\n        return md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(min(a, b), b + 1) if i % 2 == 0]"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    sentences = S.split('.!?')\n    boredoms = [sentence.strip() for sentence in sentences if sentence] \n    boredoms = [sentence for sentence in boredoms if sentence and sentence[0].lower().casefold() == 'i' if len(sentence) > 0]\n  return len([sentence for sentence in boredoms if sentence])"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    # Check if inputs are strings\n    if isinstance(a, str):\n        a = a.replace(',', '.') if ',' in a else a\n        a = float(a) if '.' in a else int(a)\n    if isinstance(b, str):\n        b = b.replace(',', '.') if ',' in b else b\n        b = float(b) if '.' in b else int(b)\n\n    # Compare and return the larger value\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int):\n    \"\"\"\n    This function calculates the number of collisions that will occur when n cars\n    are moving in opposite directions on a straight line.\n    \n    Parameters:\n    n (int): The number of cars moving in opposite directions.\n    \n    Returns:\n    int: The total number of collisions that will occur.\n    \"\"\"\n    # Initialize the number of collisions to 0\n    collisions = 0\n    \n    # Iterate over the range of cars moving in opposite directions\n    for i in range(1, n + 1):\n        # For each car, it will collide with all the cars coming from the opposite direction\n        # that are behind it.\n        collisions += i - 1\n    \n    # Return the total number of collisions\n    return collisions * (collisions + 1) // 2"}
