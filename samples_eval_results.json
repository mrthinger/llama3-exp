{"date": "2024-05-11 00:47", "hash": "84f4b93a1270b492e4c54d5212da7a5b", "eval": {"HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()())) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    groups = paren_string.split()  # split the input string into groups separated by spaces\n    max_depths = []  # list to store the maximum depth of each group\n\n    for group in groups:\n        max_depth = 0  # initialize max_depth for each group\n        curr_depth = 0  # initialize current depth for each group\n        for char in group:\n            if char == '(':\n                curr_depth += 1\n                max_depth = max(max_depth, curr_depth)  # update max_depth if necessary\n            elif char == ')':\n                curr_depth -= 1\n        max_depths.append(max_depth)  # append the max_depth of each group to the result list\n\n    return max_depths", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List\nimport re\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Separate groups of balanced parentheses into separate strings.\n\n    Args:\n        paren_string (str): Input string containing multiple groups of nested parentheses.\n\n    Returns:\n        List[str]: List of separate strings, each containing a group of balanced parentheses.\n    \"\"\"\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    # Use regular expression to find all balanced groups of parentheses\n    pattern = r'\\((?:[()]*\\))'  # matches a group of balanced parentheses\n    groups = re.findall(pattern, paren_string)\n    return groups", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((()))()"]]}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    \n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:  # don't append delimeter after last element\n            result.append(delimeter)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that contain given substring\n\n    Args:\n        strings (List[str]): Input list of strings\n        substring (str): Substring to search for\n\n    Returns:\n        List[str]: Filtered list of strings that contain the given substring\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\n    Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): A list of float numbers\n        threshold (float): The maximum allowed difference between two numbers\n\n    Returns:\n        bool: True if there are two numbers closer than the threshold, False otherwise\n    \"\"\"\n    numbers.sort()  # sort the list of numbers in ascending order\n    for i in range(1, len(numbers)):  # iterate over the sorted list\n        if numbers[i] - numbers[i-1] <= threshold:  # check if the difference is <= threshold\n            return True  # if it is, return True\n    return False  # if no such pair is found, return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1.0, 2.0, 3.0, 4.0, 5.0], 1.0]]}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:  # edge case: empty string\n        return ''\n    for i in range(len(string) - 1, -1, -1):  # iterate over suffixes in reverse order\n        suffix = string[i:]\n        if is_palindrome(suffix):  # found a palindromic suffix\n            prefix = string[:i][::-1]  # reverse of the prefix that comes before the palindromic suffix\n            return string + prefix\n    raise ValueError(\"Shouldn't reach here\")  # sanity check", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["x"]], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \"\"\"\n    # Calculate the mean of the input numbers\n    mean_val = statistics.mean(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    abs_deviations = [abs(x - mean_val) for x in numbers]\n    \n    # Calculate the mean of the absolute deviations (MAD)\n    mad = sum(abs_deviations) / len(abs_deviations)\n    \n    return mad", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2.109160016548039, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0]]]}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two input strings a and b consisting only of 1s and 0s.\n    \n    Args:\n        a (str): First input string\n        b (str): Second input string\n    \n    Returns:\n        str: Result of binary XOR operation as a string\n    \"\"\"\n    # Initialize an empty list to store the result\n    result: List[str] = []\n    \n    # Iterate over the zip of the two input strings\n    for x, y in zip(a, b):\n        # Perform XOR operation on the corresponding bits\n        result.append(\"1\" if x != y else \"0\")\n    \n    # Join the result list into a single string\n    return \"\".join(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    Returns True if the balance of the account falls below zero at any point, False otherwise.\n\n    :param operations: A list of deposit and withdrawal operations on a bank account that starts with zero balance.\n    :return: True if the balance falls below zero, False otherwise.\n    \"\"\"\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:  # if the input list is empty\n        return None\n    return max(strings, key=len)  # return the longest string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b \"\"\"\n    while b:\n        a, b = b, a % b\n    return abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number % 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_maxes = []\n    max_so_far = float('-inf')  # Initialize max_so_far to negative infinity\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_maxes.append(max_so_far)\n    return rolling_maxes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\nimport math  # <--- added this line\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a total_sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers) if numbers else 0  # sum of all numbers in the list, 0 if the list is empty\n    product = math.prod(numbers) if numbers else 1  # product of all numbers in the list, 1 if the list is empty\n    return total_sum, product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n    return [string[:i+1] for i in range(len(string))]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.casefold()))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parse a string of musical notes in a special ASCII format and return a list of integers\n    representing the number of beats each note lasts.\n\n    :param music_string: A string of musical notes in a special ASCII format\n    :return: A list of integers representing the number of beats each note lasts\n    \"\"\"\n    note_durations = {\n        'o': 4,  # whole note, lasts four beats\n        'o|': 2,  # half note, lasts two beats\n        '.|': 1  # quater note, lasts one beat\n    }\n\n    notes = music_string.split()  # split the input string into individual notes\n    durations = [note_durations.get(note, 0) for note in notes]  # look up each note's duration\n    return durations", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    \"\"\"\n    # Create a dictionary to map numberals to their integer values\n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numberals\n    num_list: List[str] = numbers.split()\n\n    # Sort the list of numberals based on their integer values\n    num_list.sort(key=lambda x: num_map[x])\n\n    # Join the sorted list of numberals into a string separated by spaces\n    sorted_numbers: str = ' '.join(num_list)\n\n    return sorted_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"\n    Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    \"\"\"\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 (inclusive)\")\n    digits = \"0123456789\"[:base]\n    result = \"\"\n    while x:\n        x, remainder = divmod(x, base)\n        result = digits[remainder] + result\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 3]]}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    if range_val == 0:\n        # all numbers are the same, return a list of 0.0s\n        return [0.0] * len(numbers)\n    \n    return [(x - min_val) / range_val for x in numbers]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0.1, 0.5, 0.9, 0.3, 0.7]]]}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \"\"\"\n    result = l.copy()  # make a copy of the input list\n    thirds = [x for i, x in enumerate(l) if i % 3 == 2]  # collect all elements at indices that are 2 mod 3\n    thirds.sort()  # sort them\n    for i, x in enumerate(l):\n        if i % 3 == 2:\n            result[i] = thirds.pop(0)  # replace the i-th element of result with the smallest unassigned element from thirds\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\"\n    Find how many times a given substring can be found in the original string. Count overlapping cases.\n    \"\"\"\n    return sum(1 for i in range(len(string)) if string[i:i+len(substring)] == substring)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    # Generate all possible pairs of numbers\n    pairs = list(itertools.combinations(numbers, 2))\n    \n    # Find the pair with the minimum absolute difference\n    closest_pair = min(pairs, key=lambda x: abs(x[0] - x[1]))\n    \n    # Return the pair in order (smaller number, larger number)\n    return tuple(sorted(closest_pair))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return sorted(s0) == sorted(s1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\"\"\"\n    return ''.join(c.swapcase() for c in string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list) -> float:\n    \"\"\"\n    Return the median of elements in the list l.\n    \"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        # odd length, return middle element\n        return sorted_l[mid]\n    else:\n        # even length, return average of two middle elements\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [x for x in values if isinstance(x, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars moving in opposite directions.\n\n    Args:\n        n (int): The number of cars in each direction.\n\n    Returns:\n        int: The total number of collisions.\n    \"\"\"\n    return (n * (n - 1)) // 2 + (n * (n - 1)) // 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list) -> int:\n    \"\"\"Return maximum element in the list.\"\"\"\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        complement = -num\n        if complement in seen and num != -num:  # handle case where num == -num\n            return True\n        seen.add(num)\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the Fib4 number sequence.\n\n    Args:\n        n (int): The index of the sequence (0-indexed)\n\n    Returns:\n        int: The n-th element of the Fib4 sequence\n    \"\"\"\n    if n <= 2:\n        return 0 if n < 2 else 2\n    elif n == 3:\n        return 0\n\n    # Initialize the first 4 elements of the sequence\n    fib_seq = [0] * (n + 1)\n    fib_seq[2] = 2\n\n    # Compute the rest of the sequence iteratively\n    for i in range(4, n + 1):\n        fib_seq[i] = fib_seq[i-1] + fib_seq[i-2] + fib_seq[i-3] + fib_seq[i-4]\n\n    return fib_seq[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False  # no matching opening bracket\n            stack.pop()\n    return not stack  # True if all opening brackets have been closed", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list, epsilon=1e-6, max_iter=100):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    # Check if the number of coefficients is even\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even\")\n\n    # Find the largest non-zero coefficient\n    non_zero_coefficients = [coeff for coeff in xs if math.isclose(coeff, 0, abs_tol=1e-9) == False]\n    if len(non_zero_coefficients) == 0:\n        raise ValueError(\"All coefficients are zero\")\n\n    # Find the largest non-zero coefficient\n    max_coefficient = max(non_zero_coefficients)\n    max_coefficient_index = xs.index(max_coefficient)\n\n    # Find the range where the polynomial changes sign\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) >= 0:\n        a *= 2\n        b /= 2\n\n    # Bisection method\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        fa, fc = poly(xs, a), poly(xs, c)\n        if abs(fc) < epsilon:\n            return c\n        elif fa * fc < 0:\n            b = c\n        else:\n            a = c\n\n    # If no zero is found, raise an error\n    raise ValueError(\"No zero found\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\"\"\"\n    return (a * h) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    return text == text[::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # convert to binary and remove '0b' prefix\n    return f\"db{binary}db\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    s = s.lower()  # convert to lowercase for case-insensitivity\n    vowels = 'aeiou'\n    count = sum(1 for c in s[:-1] if c in vowels)  # count vowels except for 'y' at the end\n    count += int(s.endswith('y'))  # add 1 if the word ends with 'y'\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    \"\"\"\n    return list(OrderedDict((x, True) for x in numbers).keys())", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    \"\"\"\n    Compute the n-th element of the FibFib number sequence.\n\n    The FibFib sequence is defined as:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3) for n >= 3\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        # Use memoization to store and reuse previously computed values\n        memo = {0: 0, 1: 0, 2: 1}\n        for i in range(3, n + 1):\n            memo[i] = memo.get(i - 1, 0) + memo.get(i - 2, 0) + memo.get(i - 3, 0)\n        return memo[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list) -> list:\n    \"\"\"Return sorted unique elements in a list\"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    n = len(arr)\n    # Initialize a 2D array to store the minimum number of changes\n    dp = [[0] * n for _ in range(n)]\n    \n    # Initialize the diagonal elements to 0, because a single element is always palindromic\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # Fill the dp table in a bottom-up manner\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j] + 1, dp[i][j - 1] + 1, dp[i + 1][j - 1] + 2)\n    \n    # The minimum number of changes is stored in dp[0][n - 1]\n    return dp[0][n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "import math\n\ndef iscube(a):\n    '''\n    Returns True if the input integer a is a cube of some integer number.\n    '''\n    return round(abs(a) ** (1. / 3)) ** 3 == abs(a)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()  # sort the list in non-decreasing order\n    for i in range(len(l) - 2):  # iterate over the list, considering each element as a potential first element of a triple\n        if i > 0 and l[i] == l[i - 1]:  # skip duplicates to ensure distinct elements\n            continue\n        left, right = i + 1, len(l) - 1  # initialize two pointers, one at the next element, one at the end\n        while left < right:\n            total = l[i] + l[left] + l[right]  # calculate the sum of the three elements\n            if total < 0:\n                left += 1  # if the sum is negative, move the left pointer to the right\n            elif total > 0:\n                right -= 1  # if the sum is positive, move the right pointer to the left\n            else:\n                return True  # if the sum is zero, return True\n    return False  # if no triple is found, return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [x for x in l if x > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Returns True if a is the multiplication of 3 prime numbers, False otherwise\"\"\"\n    if a < 2:\n        return False\n    for i in range(2, a + 1):\n        if a % i == 0:\n            factors = [i]\n            a //= i\n            while a > 1:\n                for j in range(2, int(a ** 0.5) + 1):\n                    if a % j == 0:\n                        factors.append(j)\n                        a //= j\n                        break\n                else:\n                    factors.append(a)\n                    break\n            if len(factors) == 3 and all(is_prime(x) for x in factors):\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    Returns True if x is a simple power of n, False otherwise.\n    \"\"\"\n    root = x ** (1.0 / n)\n    return root == int(root)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9, 3]], "plus_fail_tests": []}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in text if c not in vowels])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list) -> bool:\n    \"\"\"\n    Return True if list elements are monotonically increasing or decreasing.\n    \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \"\"\"\n    # Separate even and odd indexed elements into separate lists\n    even_indexed = [x for i, x in enumerate(l) if i % 2 == 0]\n    odd_indexed = [x for i, x in enumerate(l) if i % 2 == 1]\n\n    # Sort the even indexed elements\n    even_indexed.sort()\n\n    # Interleave the sorted even indexed elements with the odd indexed elements\n    result = [None] * len(l)\n    even_index = 0\n    odd_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result[i] = even_indexed[even_index]\n            even_index += 1\n        else:\n            result[i] = odd_indexed[odd_index]\n            odd_index += 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s.lower()])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs: list) -> list:\n    \"\"\"\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i * x for i, x in enumerate(xs[1:], start=1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(list(set(l1) & set(l2)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    # Convert the integer to a string to easily access and manipulate the digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than or equal to the number of digits, return the reversed digits\n    if shift >= num_digits:\n        return digits[::-1]\n    \n    # Otherwise, perform the circular shift\n    else:\n        shift = shift % num_digits  # Handle cases where shift is a multiple of num_digits\n        return digits[-shift:] + digits[:-shift]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12, 2]], "plus_fail_tests": [[987654321, 9]]}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    Returns the number of mango fruits in the basket given the string representation\n    of apples and oranges and the total number of fruits in the basket.\n    \"\"\"\n    # Extract the number of apples and oranges from the input string\n    apples, oranges = map(int, ''.join(c for c in s if c.isdigit()).split()[:2])\n    # Calculate the number of mango fruits by subtracting apples and oranges from the total\n    return n - apples - oranges", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Return True if every opening bracket has a corresponding closing bracket.\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False  # no matching opening bracket\n            stack.pop()\n    return not stack  # True if all opening brackets have been closed", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    Pluck the node with the smallest even value from the array and return it.\n    If multiple nodes with the same smallest even value are found, return the node with the smallest index.\n    If there are no even values or the given array is empty, return [].\n    \"\"\"\n    even_nodes = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]\n    if not even_nodes:\n        return []\n    even_nodes.sort(key=lambda x: (x[0], x[1]))\n    return [even_nodes[0][0], even_nodes[0][1]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are prime numbers.\n\n    Args:\n        num (str): A hexadecimal number as a string.\n\n    Returns:\n        int: The number of prime hexadecimal digits.\n    \"\"\"\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\n    # Convert the input string to uppercase (just in case)\n    num = num.upper()\n\n    # Initialize a counter for prime digits\n    prime_count = 0\n\n    # Iterate over each character in the input string\n    for digit in num:\n        # Check if the digit is prime\n        if digit in prime_hex_digits:\n            prime_count += 1\n\n    # Return the count of prime digits\n    return prime_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[]]], "plus_fail_tests": [[{}]]}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Base case: if n is 1, return 2 (1 and 1)\n    if n == 1:\n        return 2\n    \n    # Count of numbers that start with 1: 9 * (10^(n-1) - 1) / 9 + 1\n    # (because the first digit is fixed to 1, and the remaining n-1 digits can take any value from 0 to 9)\n    starts_with_one = 9 * (10 ** (n-1) - 1) // 9 + 1\n    \n    # Count of numbers that end with 1: 10^(n-1) (because the last digit is fixed to 1, and the remaining n-1 digits can take any value from 0 to 9)\n    ends_with_one = 10 ** (n-1)\n    \n    # Remove the count of numbers that start and end with 1 (to avoid double counting)\n    starts_and_ends_with_one = 9 * (10 ** (n-2) - 1) // 9 + 1 if n > 1 else 1\n    \n    # Return the total count\n    return starts_with_one + ends_with_one - starts_and_ends_with_one", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    '''\n    Returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n    '''\n    return q == q[::-1] and sum(q) <= w", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(s):\n    \"\"\"Return True if the length of the string is a prime number, False otherwise\"\"\"\n    return is_prime(len(s))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    Convert a list of GPAs to a list of letter grades.\n\n    Args:\n        grades (list): A list of GPAs (floats)\n\n    Returns:\n        list: A list of letter grades (strings)\n    \"\"\"\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list, or None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:  # edge case: list has less than 2 elements\n        return None\n    smallest = min(lst)  # find the smallest element\n    lst.remove(smallest)  # remove the smallest element from the list\n    if not lst:  # edge case: all elements were equal\n        return None\n    return min(lst)  # return the new smallest element (2nd smallest overall)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1]]], "plus_fail_tests": [[[2, 2, 2, 2, 2, 2, 3, 3, 3, 3]]]}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"\n    Returns True if the string s is happy, False otherwise.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n    \"\"\"\n    return len(s) >= 3 and all(s[i-2] != s[i-1] != s[i] != s[i-2] for i in range(2, len(s)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    max_val = -1\n    for num, f in freq.items():\n        if f >= num > 0:\n            max_val = max(max_val, num)\n    \n    return max_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    # Check if the three sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the three sides do not form a valid triangle\n        return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Returns an ordered version of the input string, where each word is replaced\n    by a new word with characters in ascending order of ASCII value.\n    \"\"\"\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    '''\n    Returns the list with the total number of chars in all strings less than or equal to the other list.\n    If the two lists have the same number of chars, returns the first list.\n    '''\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "import re\n\ndef is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a string of words.\n    A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \"\"\"\n    sentences = re.split('[.!?]', S)  # split the string into sentences\n    boredoms = sum(1 for s in sentences if s.strip() and s[0].casefold() == 'i')\n    return boredoms", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Is the sky blue?"]], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    # Convert N to binary as a string, remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    \n    # Calculate the sum of digits in binary\n    digit_sum = sum(int(digit) for digit in binary_str)\n    \n    # Convert the sum back to binary as a string, remove the '0b' prefix\n    result = bin(digit_sum)[2:]\n    \n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\nimport math\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    \"\"\"\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    factors.sort()\n    return factors", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    Returns a list of coordinates (row, col) where x appears in the 2D list.\n    Coordinates are sorted first by row (asc) and then by col (desc).\n    \"\"\"\n    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    coords.sort(key=lambda x: (x[0], -x[1]))  # sort by row (asc) and then by col (desc)\n    return coords", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"\n    Returns an array of the first n integers that are prime numbers and less than n.\n    \"\"\"\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes[:n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"Return the product of the unit digits of a and b\"\"\"\n    return abs(a % 10) * abs(b % 10)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:  # if the dictionary is empty, return False\n        return False\n    \n    key_cases = [isinstance(k, str) and k.islower() for k in d] + [isinstance(k, str) and k.isupper() for k in d]\n    return all(key_cases) or all([x ^ y for x, y in zip(key_cases[::2], key_cases[1::2]) + [(False, False)]])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    \"\"\"\n    Returns True if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns False in any other cases.\n    \"\"\"\n    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\n            (x == y + z or y == x + z or z == x + y))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    if not array:  # edge case: empty array\n        return []\n\n    first_last_sum = array[0] + array[-1]\n    sorted_array = sorted(array)  # create a copy and sort in ascending order\n\n    if first_last_sum % 2 == 0:  # sum is even, reverse the sorted array\n        sorted_array = sorted_array[::-1]\n\n    return sorted_array", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"\n    Encrypt a string by rotating the alphabet down by 2^2 = 4 places.\n\n    :param s: The input string to encrypt\n    :return: The encrypted string\n    \"\"\"\n    encrypted = \"\"\n    for c in s:\n        if c.isalpha():  # only encrypt letters, not punctuation or numbers\n            shift = 4\n            if c.isupper():  # preserve case\n                start = ord('A')\n            else:\n                start = ord('a')\n            encrypted += chr((ord(c) - start + shift) % 26 + start)\n        else:\n            encrypted += c  # don't encrypt non-letter characters\n    return encrypted", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    '''\n    num = float(value)  # convert string to float\n    int_part = int(abs(num))  # get the integer part of the number\n    frac_part = abs(num) - int_part  # get the fractional part of the number\n    if frac_part >= 0.5:\n        return int_part + 1 if num >= 0 else -(int_part + 1)  # round away from zero\n    else:\n        return int_part if num >= 0 else -int_part  # round to nearest integer", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c.isupper() and c in 'AEIOU':\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    # Ensure x is not greater than y\n    x, y = min(x, y), max(x, y)\n    \n    # Find the largest even number in the range [x, y] inclusive\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    \n    # If no even number is found, return -1\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 12]], "plus_fail_tests": [[100, 6]]}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Encodes a message by swapping case of all letters, and replacing\n    all vowels with the letter that appears 2 places ahead of that\n    vowel in the English alphabet.\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for c in message:\n        if c.isalpha():  # only consider letters\n            if c.isupper():  # preserve case\n                c = c.lower()\n            else:\n                c = c.upper()\n            if c in vowels:  # shift vowels\n                idx = (ord(c) - ord('a' if c.islower() else 'A') + 2) % 26\n                c = chr(idx + ord('a' if c.islower() else 'A'))\n        encoded_message += c\n    return encoded_message", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into a list of words.\n\n    Args:\n        s (str): The input string of words separated by commas or spaces.\n\n    Returns:\n        list: A list of words.\n    \"\"\"\n    return [x.strip() for x in s.replace(\",\", \" \").split()]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"\n    Returns True if the input array can be sorted in non-decreasing order by performing\n    right shift operations, False otherwise.\n    \"\"\"\n    if not arr:  # edge case: empty array\n        return True\n\n    n = len(arr)\n    min_idx = arr.index(min(arr))  # find the index of the minimum element\n\n    # check if the subarray from min_idx to the end is non-decreasing\n    if all(arr[(min_idx + i) % n] <= arr[(min_idx + i + 1) % n] for i in range(n - min_idx - 1)):\n        return True\n\n    # check if the subarray from the start to min_idx is non-decreasing\n    if all(arr[i] <= arr[i + 1] for i in range(min_idx - 1)):\n        return True\n\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 3, 1, 2]]], "plus_fail_tests": [[[8, 7, 6, 5, 4, 3, 2, 1]]]}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Returns the number of elements in the array that have a sum of digits > 0.\n    \"\"\"\n    count = 0\n    for num in arr:\n        digit_sum = sum(abs(int(digit)) for digit in str(num).lstrip('-'))\n        if digit_sum > 0:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        str_i = str(i)\n        if str_i == str_i[::-1]:  # check if it's a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Returns True if the date string is valid, False otherwise.\n    \"\"\"\n    # Rule 1: The date string is not empty.\n    if not date:\n        return False\n\n    # Split the date string into month, day, year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False  # Invalid date format, should be mm-dd-yyyy\n\n    month, day, year = map(int, parts)\n\n    # Rule 3: The months should not be less than 1 or higher than 12.\n    if not 1 <= month <= 12:\n        return False\n\n    # Rule 2: The number of days is valid for the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:  # 31 days\n        max_days = 31\n    elif month == 2:  # 29 days (leap year not considered)\n        max_days = 29\n    else:  # 30 days\n        max_days = 30\n\n    if not 1 <= day <= max_days:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["06-04-202"]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\"\n    Returns a list of size n, where:\n    - the value at index i is the factorial of i if i is even\n    - the value at index i is the sum of numbers from 1 to i if i is odd\n    \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # i is even\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:  # i is odd\n            result.append(sum(range(1, i + 1)))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out numbers that are not between 1 and 9 inclusive\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the remaining numbers in ascending order\n    arr.sort()\n    \n    # Reverse the sorted array\n    arr = arr[::-1]\n    \n    # Create a dictionary to map numbers to their corresponding names\n    names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Replace each number with its corresponding name\n    result = [names[x] for x in arr]\n    \n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    s1, s2 = ''.join(reversed(lst[0])), ''.join(reversed(lst[1]))\n    return 'Yes' if (is_balanced(s1 + lst[1]) or is_balanced(s2 + lst[0])) else 'No'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["()()", "()()()"]]]}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Check if the length of the intersection of two intervals is prime\"\"\"\n    # Find the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:  # Intervals don't intersect\n        return \"NO\"\n    intersection_len = end - start + 1\n    if is_prime(intersection_len):\n        return \"YES\"\n    else:\n        return \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 1], [0, 4]]], "plus_fail_tests": [[[10, 20], [15, 25]]]}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # delete all characters in s that are equal to any character in c\n    result = ''.join([ch for ch in s if ch not in c])\n    \n    # check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    return lst == sorted(set(lst), reverse=False) and len(lst) == len(set(lst)) + sum(1 for x in set(lst) if lst.count(x) > 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:  # n is even\n            n = n // 2\n        else:  # n is odd\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([x for x in collatz_sequence if x % 2 != 0])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(row.count(1) for row in grid)\n    return math.ceil(total_water / capacity)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 1, 1, 1], [1, 1, 1, 1]], 9]], "plus_fail_tests": []}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[-2, -3, -4, -5, -6]]], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"\n    Find the closest vowel that stands between two consonants from the right side of the word.\n\n    Args:\n        word (str): The input word\n\n    Returns:\n        str: The closest vowel that meets the condition, or an empty string if none is found\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    word = word[::-1]  # Reverse the word to iterate from right to left\n    for i, c in enumerate(word[1:-1]):  # Iterate over the word, excluding the first and last characters\n        if c in vowels and word[i-1] not in vowels and word[i+2] not in vowels:\n            return c[::-1]  # Found a matching vowel, return it (reversed back to original case)\n    return ''  # No matching vowel found", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["quick"]], "plus_fail_tests": [["bike"]]}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    \"\"\"\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',', if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    \"\"\"\n    # Split on whitespace first\n    words = txt.split()\n    if words:  # if there are words after splitting on whitespace\n        return words\n    else:\n        # Split on commas if no whitespace\n        words = txt.split(',')\n        if words:  # if there are words after splitting on commas\n            return [word.strip() for word in words]  # remove leading/trailing whitespace\n        else:\n            # Count the number of lower-case letters with odd order in the alphabet\n            count = sum(c.islower() and (ord(c) - ord('a')) % 2 == 1 for c in txt)\n            return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hello,world!"]], "plus_fail_tests": []}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    Returns the sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Returns None for an empty array.\n    \"\"\"\n    if not arr:\n        return None  # return None for an empty array\n\n    magnitude_sum = sum(abs(x) for x in arr)  # sum of magnitudes\n    sign_product = 1  # initialize sign product to 1\n    for x in arr:\n        sign_product *= 1 if x == 0 else -1 if x < 0 else 1  # update sign product\n\n    return magnitude_sum * sign_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, 1]]], "plus_fail_tests": [[[-1, 0, 1, 2]]]}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_digits = sum(c in '13579' for c in s)\n        result.append(\"\".join(\"4n\" if c == \"o\" else c for c in f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\"))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x. Return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    def has_even_digit(n):\n        \"\"\"Return True if n has an even digit, False otherwise\"\"\"\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    return sorted([num for num in x if not has_even_digit(num)])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    return sum(x for x in arr[:k] if len(str(abs(x))) <= 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    Returns \"YES\" if it is possible to exchange elements between lst1 and lst2\n    to make all elements of lst1 even, otherwise returns \"NO\".\n    \"\"\"\n    # Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to\n    # the number of even numbers in lst2, we can exchange elements\n    # to make all elements of lst1 even\n    return \"YES\" if odd_in_lst1 <= even_in_lst2 else \"NO\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    return sorted(arr, reverse=True)[:k][::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    # Split the input string into a list of letters\n    letters = test.split()\n    \n    # Create a dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Iterate over the letters and count their occurrences\n    for letter in letters:\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Create a dictionary with the letters that have the maximum count\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return max_letters", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"\n    Returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s.\n    \"\"\"\n    # Define a set of consonants (case-insensitive)\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n\n    # Split the input string into words\n    words = s.split()\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over each word in the input string\n    for word in words:\n        # Convert the word to lowercase (for case-insensitive comparison)\n        word_lower = word.lower()\n\n        # Count the number of consonants in the word\n        num_consonants = sum(1 for c in word_lower if c in consonants)\n\n        # If the word has exactly n consonants, add it to the result list\n        if num_consonants == n:\n            result.append(word)\n\n    # Return the result list\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \"\"\"\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int) -> int:\n    \"\"\"\n    Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \"\"\"\n    def is_prime(p: int) -> bool:\n        \"\"\"\n        Return True if p is a prime number, False otherwise.\n        \"\"\"\n        if p < 2:\n            return False\n        for i in range(2, int(p ** 0.5) + 1):\n            if p % i == 0:\n                return False\n        return True\n\n    for p in range(n - 1, 1, -1):\n        if n % p == 0 and is_prime(p):\n            return p", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # edge case: n is a prime number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    \"\"\"\n    if n % 2 != 0:  # if n is odd, it cannot be written as a sum of even numbers\n        return False\n    for a in range(2, n//2 + 1, 2):  # iterate over all possible even numbers\n        for b in range(a, n//2 + 1, 2):\n            for c in range(b, n//2 + 1, 2):\n                for d in range(c, n//2 + 1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    return sorted((abs(sum(int(digit) for digit in str(abs(x))), -i) for i, x in enumerate(nums)), reverse=True)[::-1][::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"\n    Simplify the expression x * n and return True if it evaluates to a whole number, False otherwise.\n\n    x and n are string representations of fractions in the format <numerator>/<denominator>\n    where both numerator and denominator are positive whole numbers.\n    \"\"\"\n    # Split the input strings into numerators and denominators\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n\n    # Calculate the product of the fractions\n    product_num = num_x * num_n\n    product_den = den_x * den_n\n\n    # Check if the product is a whole number (i.e., the denominator is 1)\n    return product_den == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(x) ** 2 for x in lst])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operators, operands):\n    \"\"\"\n    Evaluates the algebraic expression built from the given operators and operands.\n\n    Args:\n        operators (list): A list of basic algebra operations (+, -, *, //, **)\n        operands (list): A list of non-negative integers\n\n    Returns:\n        int: The result of evaluating the algebraic expression\n    \"\"\"\n    result = operands[0]\n    for op, operand in zip(operators, operands[1:]):\n        if op == '+':\n            result += operand\n        elif op == '-':\n            result -= operand\n        elif op == '*':\n            result *= operand\n        elif op == '//':\n            result //= operand\n        elif op == '**':\n            result **= operand\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": []}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        elif c == ']':\n            if len(stack) == 0:\n                return False  # Unbalanced brackets\n            elif len(stack) == 1:\n                stack.pop()\n            else:\n                stack.pop()  # Found a nested bracket, return True\n                return True\n    return len(stack) == 0  # If stack is empty, no nested brackets found", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[][]"]], "plus_fail_tests": [["[][][]"]]}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, -73, 14, -15]]], "plus_fail_tests": []}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    product = 1\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:  # even digit, reset product to 0\n            return 0\n        product *= digit\n    return product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[54]], "plus_fail_tests": [[182135]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Returns the largest index of an element which is not greater than or equal to\n    the element immediately preceding it. If no such element exists then return -1.\n    \"\"\"\n    for i in reversed(range(1, len(arr))):\n        if arr[i] < arr[i-1]:\n            return i-1\n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"\n    Returns 'Yes' if the file's name is valid, and 'No' otherwise.\n    \"\"\"\n    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into two parts: before and after the dot\n    before_dot, after_dot = file_name.rsplit('.', 1)\n    \n    # Check if the part before the dot is not empty and starts with a latin alphabet letter\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check if there are more than three digits in the file's name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check if the part after the dot is one of the allowed extensions\n    if after_dot.lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks pass, the file name is valid\n    return 'Yes'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["example.TXt"]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Returns True if the last character of a given string is an alphabetical character\n    and is not a part of a word, and False otherwise.\n    \"\"\"\n    # Remove trailing spaces\n    txt = txt.rstrip()\n    # If the string is empty, return False\n    if not txt:\n        return False\n    # Split the string into words\n    words = txt.split()\n    # Get the last word\n    last_word = words[-1]\n    # Check if the last character of the last word is an alphabetical character\n    return last_word[-1].isalpha() and len(last_word) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["eeeee e "]], "plus_fail_tests": [["apple pi\ne"]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers, squares the integer entry if its index is a multiple of 3,\n    cubes the integer entry if its index is a multiple of 4 and not a multiple of 3, and leaves the\n    entries unchanged if its index is not a multiple of 3 or 4. The function then returns the sum of all entries.\n    \"\"\"\n    return sum(x**2 if i % 3 == 2 else x**3 if i % 4 == 3 else x for i, x in enumerate(lst))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Compare two numbers (int, float, or str) and return the larger one in its original type.\n    Return None if the values are equal.\n    \"\"\"\n    # Normalize input types to float (or raise ValueError if not a number)\n    a_norm = _normalize(a)\n    b_norm = _normalize(b)\n\n    # Compare the normalized values\n    if a_norm > b_norm:\n        return _denormalize(a)\n    elif a_norm < b_norm:\n        return _denormalize(b)\n    else:\n        return None\n\ndef _normalize(x):\n    \"\"\"\n    Normalize input to float (or raise ValueError if not a number)\n    \"\"\"\n    if isinstance(x, (int, float)):\n        return x\n    elif isinstance(x, str):\n        x = x.replace(\",\", \".\")  # handle European notation\n        try:\n            return float(x)\n        except ValueError:\n            raise ValueError(f\"'{x}' is not a valid number\")\n    else:\n        raise ValueError(f\"Unsupported type: {type(x)}\")\n\ndef _denormalize(x):\n    \"\"\"\n    Denormalize float back to original type (int, float, or str)\n    \"\"\"\n    if isinstance(x, int):\n        return x\n    elif isinstance(x, float):\n        return x\n    elif isinstance(x, str):\n        return x.replace(\".\", \",\") if \",\" in x else x\n    else:\n        raise ValueError(f\"Unsupported type: {type(x)}\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Return True if the second word or any of its rotations is a substring in the first word\n    \"\"\"\n    # Generate all rotations of the second word\n    rotations = [''.join([b[i:] + b[:i] for i in range(len(b))])]\n    # Check if any rotation is a substring of the first word\n    return any(rot in a for rot in rotations)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["yello", "ell"]], "plus_fail_tests": [["abcdefg", "cde"]]}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n    \"\"\"\n    if not text:\n        return None\n    md5_hash = hashlib.md5(text.encode()).hexdigest()\n    return md5_hash.upper()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace 3 or more consecutive spaces with a dash\n    text = re.sub(' {3,}', '-', text)\n    # Replace remaining spaces with underscores\n    text = text.replace(' ', '_')\n    return text", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syr = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syr[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b\n    a, b = min(a, b), max(a, b)\n    \n    # Use a list comprehension to generate the even digits\n    return [i for i in range(a, b+1) if i % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    return 2 * sum(x**2 for x in lst if x % 2 == 1 and x >= 0 and isinstance(x, int))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4]]], "plus_fail_tests": []}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return largest_negative, smallest_positive", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides in non-decreasing order\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return c**2 == a**2 + b**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)  # take the absolute value to handle negative numbers\n    even_count = sum(1 for digit in str(num) if int(digit) % 2 == 0)\n    odd_count = len(str(num)) - even_count\n    return even_count, odd_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Return a string with words whose lengths are prime numbers\n    \"\"\"\n    words = sentence.split()  # split the sentence into a list of words\n    result = ' '.join(word for word in words if is_prime(len(word)))\n    return result.strip()  # remove trailing space", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Returns the strongest extension for the given class name.\n\n    Parameters:\n    class_name (str): The name of the class.\n    extensions (list[str]): A list of extension names.\n\n    Returns:\n    str: A string in the format \"ClassName.StrongestExtensionName\".\n    \"\"\"\n    def extension_strength(ext):\n        \"\"\"Calculates the strength of an extension.\"\"\"\n        cap = sum(c.isupper() for c in ext)\n        sm = sum(c.islower() for c in ext)\n        return cap - sm\n\n    # Find the strongest extension\n    strongest_ext = max(extensions, key=extension_strength)\n\n    # Return the result in the required format\n    return f\"{class_name}.{strongest_ext}\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    ... (docstring omitted for brevity)\n    \"\"\"\n    total_eaten = number + min(need, remaining)  # eat as many as needed, but not more than remaining\n    carrots_left = max(0, remaining - need)  # update remaining carrots, but not negative\n    return [total_eaten, carrots_left]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"\n    Compare the game scores with the guesses and return an array of absolute differences.\n\n    Args:\n        game (list): List of game scores\n        guess (list): List of guesses\n\n    Returns:\n        list: List of absolute differences between game scores and guesses\n    \"\"\"\n    return [abs(a - b) if a != b else 0 for a, b in zip(game, guess)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    '''\n    Returns a tuple of planets whose orbits are between planet1 and planet2, \n    sorted by proximity to the sun.\n    '''\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def x_or_y(n, x, y):\n    \"\"\"A simple program which returns the value of x if n is a prime number and y otherwise.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    Find the word with maximum number of unique characters.\n    If multiple strings have maximum number of unique characters,\n    return the one which comes first in lexicographical order.\n\n    Parameters:\n    words (list[str]): List of strings\n\n    Returns:\n    str: The word with maximum number of unique characters\n    \"\"\"\n    if not words:\n        return \"\"\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))  # Convert to set to get unique chars\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            # If number of unique chars is the same, compare lexicographically\n            max_word = min(max_word, word)\n\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    result = \"\".join([c.swapcase() if c.isalpha() else c for c in s])\n    return result[::-1] if not any(c.isalpha() for c in s) else result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \"\"\"\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"\n    Compute the average of the integers from n through m (including n and m),\n    round the answer to the nearest integer, and convert that to binary.\n    If n is greater than m, return -1.\n    \"\"\"\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))  # inclusive range\n    avg = round(total / (m - n + 1))  # avoid zero division\n    return bin(avg)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci() -> iter:\n    \"\"\"\n    Generator function that yields Fibonacci numbers.\n    \"\"\"\n    a, b = 0, 1\n    while True:\n        yield a\n        a, b = b, a + b\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Returns the n-th number that is both a Fibonacci number and a prime number.\n    \"\"\"\n    fib_gen = fibonacci()\n    count = 0\n    while True:\n        num = next(fib_gen)\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12]]}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Returns the first n+1 numbers of the Tribonacci sequence.\n    \"\"\"\n    trib = [0] * (n + 1)  # Initialize list to store Tribonacci sequence\n    trib[0] = 1  # Base case: tri(0) = 1 (not explicitly defined, but makes sense)\n    trib[1] = 3  # Base case: tri(1) = 3\n    for i in range(2, n + 1):\n        if i % 2 == 0:  # Even case\n            trib[i] = 1 + i // 2\n        else:  # Odd case\n            trib[i] = trib[i - 1] + trib[i - 2] + trib[i - 1]  # Note: tri(n+1) is not defined for n > 1, so use tri(n-1) instead\n    return trib[:n + 1]  # Return the first n+1 numbers of the sequence", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[10]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    min_path = [float('inf')] * k\n\n    def dfs(i, j, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path[:]\n            return\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < N and 0 <= nj < N:\n                dfs(ni, nj, path + [grid[ni][nj]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])\n\n    return min_path", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 15]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    while len(pile) < n:\n        n = n + 1 if n % 2 else n + 2\n        pile.append(n)\n    return pile", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2]]}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def skjkasdkd(lst):\n    \"\"\"\n    Find the largest prime value in the list and return the sum of its digits.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime.\n        \"\"\"\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Find the largest prime value in the list\n    largest_prime = max(x for x in lst if is_prime(x))\n\n    # Calculate the sum of its digits\n    digit_sum = sum(int(digit) for digit in str(abs(largest_prime)))\n\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "import math\n\ndef special_factorial(n):\n    \"\"\"\n    Calculate the special factorial of n, also known as the Brazilian factorial.\n\n    Args:\n        n (int): The input integer, must be greater than 0.\n\n    Returns:\n        int: The special factorial of n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}